{"version":3,"file":"index.js","mappings":"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","sources":["webpack://ecom-admin-app/./src/config/config.js","webpack://ecom-admin-app/./src/config/dbConfig.js","webpack://ecom-admin-app/./src/config/loggerConfig1.js","webpack://ecom-admin-app/./src/controllers/adminController.js","webpack://ecom-admin-app/./src/controllers/categoryController.js","webpack://ecom-admin-app/./src/controllers/customerController.js","webpack://ecom-admin-app/./src/controllers/dashboard.js","webpack://ecom-admin-app/./src/controllers/itemController.js","webpack://ecom-admin-app/./src/controllers/menuController.js","webpack://ecom-admin-app/./src/controllers/orderController.js","webpack://ecom-admin-app/./src/controllers/ratingController.js","webpack://ecom-admin-app/./src/controllers/restaurantController.js","webpack://ecom-admin-app/./src/controllers/tableController.js","webpack://ecom-admin-app/./src/errors/badRequestError.js","webpack://ecom-admin-app/./src/errors/baseError.js","webpack://ecom-admin-app/./src/errors/internalServerError.js","webpack://ecom-admin-app/./src/errors/notFoundError.js","webpack://ecom-admin-app/./src/errors/unauthorized.js","webpack://ecom-admin-app/./src/models/adminModel.js","webpack://ecom-admin-app/./src/models/categoryModel.js","webpack://ecom-admin-app/./src/models/customerModel.js","webpack://ecom-admin-app/./src/models/deleteUserModel.js","webpack://ecom-admin-app/./src/models/itemModel.js","webpack://ecom-admin-app/./src/models/menuModel.js","webpack://ecom-admin-app/./src/models/orderModel.js","webpack://ecom-admin-app/./src/models/ratingModel.js","webpack://ecom-admin-app/./src/models/restaurantModel.js","webpack://ecom-admin-app/./src/models/tableModel.js","webpack://ecom-admin-app/./src/routes/v1/adminRoutes.js","webpack://ecom-admin-app/./src/routes/v1/categoryRoutes.js","webpack://ecom-admin-app/./src/routes/v1/customerRoutes.js","webpack://ecom-admin-app/./src/routes/v1/dashboardRoutes.js","webpack://ecom-admin-app/./src/routes/v1/itemRoutes.js","webpack://ecom-admin-app/./src/routes/v1/menuRoutes.js","webpack://ecom-admin-app/./src/routes/v1/orderRoutes.js","webpack://ecom-admin-app/./src/routes/v1/ratingRoutes.js","webpack://ecom-admin-app/./src/routes/v1/restaurantRoutes.js","webpack://ecom-admin-app/./src/routes/v1/tableRoutes.js","webpack://ecom-admin-app/./src/utils/errorHandler.js","webpack://ecom-admin-app/./src/utils/utils.js","webpack://ecom-admin-app/external commonjs \"bcrypt\"","webpack://ecom-admin-app/external commonjs \"body-parser\"","webpack://ecom-admin-app/external commonjs \"compression\"","webpack://ecom-admin-app/external commonjs \"cors\"","webpack://ecom-admin-app/external commonjs \"dotenv\"","webpack://ecom-admin-app/external commonjs \"express\"","webpack://ecom-admin-app/external commonjs \"express-fileupload\"","webpack://ecom-admin-app/external commonjs \"express-mongo-sanitize\"","webpack://ecom-admin-app/external commonjs \"express-rate-limit\"","webpack://ecom-admin-app/external commonjs \"helmet\"","webpack://ecom-admin-app/external commonjs \"hpp\"","webpack://ecom-admin-app/external commonjs \"http-status-codes\"","webpack://ecom-admin-app/external commonjs \"jsonwebtoken\"","webpack://ecom-admin-app/external commonjs \"mongoose\"","webpack://ecom-admin-app/external commonjs \"uuid\"","webpack://ecom-admin-app/external commonjs \"validator\"","webpack://ecom-admin-app/external commonjs \"winston\"","webpack://ecom-admin-app/external commonjs \"winston-mongodb\"","webpack://ecom-admin-app/external node-commonjs \"fs\"","webpack://ecom-admin-app/external node-commonjs \"os\"","webpack://ecom-admin-app/external node-commonjs \"path\"","webpack://ecom-admin-app/webpack/bootstrap","webpack://ecom-admin-app/./index.js"],"sourcesContent":["const dotenv = require('dotenv');\r\n\r\ndotenv.config();\r\n\r\nmodule.exports = {\r\n    port: process.env.PORT,\r\n    adminSecretKey: process.env.ADMIN_SECRET_KEY,\r\n    mongoDBUri: process.env.MONGO_DB_URL,\r\n    tokenSecretKey: process.env.TOKEN_SECRET_KEY\r\n};","const mongoose = require('mongoose');\r\nconst { mongoDBUri } = require('./config');\r\n\r\nconst options = {\r\n  maxPoolSize: 4, // Adjust the pool size as needed\r\n};\r\n\r\nmongoose.connect(mongoDBUri, options);\r\n\r\nconst connectToDatabase = mongoose.connection;\r\nconnectToDatabase.on('error', console.error.bind(console, 'connection error:'));\r\nconnectToDatabase.once('open', () => {\r\n  console.log('Databse connected');\r\n});\r\n\r\nmodule.exports = connectToDatabase;","const winston = require('winston');\r\nrequire('winston-mongodb');\r\nconst { mongoDBUri } = require('./config');\r\n\r\nconst allowedTransports = [];\r\n\r\n// // The below transport config enables logging on the console\r\n// allowedTransports.push(new winston.transports.Console({\r\n//     format: winston.format.combine(\r\n//         winston.format.colorize(),\r\n//         winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss'}),\r\n//         winston.format.printf((log) => `${log.timestamp} [${log.level}]: [${log.message}] ${log.meta ? JSON.stringify(log.meta) : ''}`)\r\n//     )\r\n// }));\r\n\r\n// MongoDB transport\r\nallowedTransports.push(new winston.transports.MongoDB({\r\n    level: 'error',\r\n    db: mongoDBUri,\r\n    collection: 'logs',\r\n    format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json(),\r\n        winston.format((info) => {\r\n            info.meta = info.meta || {};\r\n            return info;\r\n        })()\r\n    ),\r\n    options: {\r\n        useUnifiedTopology: true\r\n    }\r\n}));\r\n\r\n// The below transport config enables logging in a file\r\nallowedTransports.push(new winston.transports.File({\r\n    filename: 'app.log'\r\n}));\r\n\r\nconst logger = winston.createLogger({\r\n    format: winston.format.combine(\r\n        winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n        winston.format.printf((log) => `${log.timestamp} [${log.level.toUpperCase()}]: ${log.message} ${log.meta? JSON.stringify(log.meta) : ''}`)\r\n    ),\r\n    transports: allowedTransports,\r\n    defaultMeta: { service: 'user-service' }\r\n});\r\n\r\n// console.log(\"logger:\", logger);\r\n\r\nmodule.exports = logger;\r\n","const adminModel = require(\"../models/adminModel\");\r\nconst logger = require('../config/loggerConfig1');\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require('fs');\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../utils/utils\");\r\nconst { port, tokenSecretKey } = require(\"../config/config\");\r\nconst NotFound = require(\"../errors/notFoundError\");\r\nconst BadRequest = require(\"../errors/badRequestError\");\r\nconst InternalServerError = require(\"../errors/internalServerError\");\r\nconst Unauthorized = require('../errors/unauthorized');\r\n\r\n\r\n// ADD ADMIN\r\nconst createAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, password, mobile, gender, date_of_birth } = req.body;\r\n\r\n        if (!name || !email || !password || !mobile) {\r\n            throw new BadRequest(\"Missing required fields\", \"name, email, password, mobile\");\r\n        }\r\n\r\n        let picObj = null;\r\n        if (\"profilePic\" in req.body || (req.files && req.files.profilePic)) {\r\n            let { profilePic } = req.files;\r\n\r\n            if (!profilePic) {\r\n                throw new BadRequest(\"No profile pic uploaded\");\r\n            }\r\n\r\n            let hashedPassword = await bcrypt.hash(password, 10);\r\n            password = hashedPassword;\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let profilePicPath = \"/adminImages/\";\r\n            let profilePicName = uuid.v4() + \".\" + profilePic.name.split(\".\").pop();\r\n            let profilePicFullPath = `http://${currentIpAddress}:${port}${profilePicPath}`;\r\n\r\n            let adminImgFolder = path.join(__dirname, \"..\", \"..\", \"adminImages\");\r\n\r\n            if (!fs.existsSync(adminImgFolder)) {\r\n                fs.mkdirSync(adminImgFolder);\r\n            };\r\n\r\n            let picSavingPath = path.join(adminImgFolder, profilePicName);\r\n\r\n            await profilePic.mv(picSavingPath, (err) => {\r\n                if (err) {\r\n                    throw err;\r\n                }\r\n            });\r\n\r\n            picObj = {\r\n                fileName: profilePicName,\r\n                filePath: profilePicFullPath,\r\n            };\r\n        }\r\n\r\n        let adminObj = {\r\n            adminId: generateRandomAlphaNumericID(26),\r\n            sessionToken: generateRandomAlphaNumericID(51),\r\n            name,\r\n            email,\r\n            password,\r\n            mobile,\r\n            gender,\r\n            date_of_birth,\r\n            profilePic: picObj,\r\n        };\r\n\r\n        let newAdmin = await adminModel.create(adminObj);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Admin created\",\r\n            data: newAdmin,\r\n        });\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n\r\n        logger.error(`Error in CreateAdmin API: ${error.message}`, { meta: metadata });\r\n\r\n        if (error instanceof BadRequest || error instanceof NotFound) {\r\n            return res.status(error.statusCode).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        const serverError = new InternalServerError(error.message);\r\n        return res.status(500).send({ status: false, message: serverError.message });\r\n    }\r\n};\r\n\r\n\r\nconst adminLogin = async (req, res) => {\r\n    try {\r\n        let { email, password } = req.body;\r\n\r\n        if (!email || !password) {\r\n            throw new BadRequest(\"Missing required fields\", \"email, password\");\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ email });\r\n        if (!admin) {\r\n            throw new BadRequest(\"Bad Request!!!\", \"Invalid email or password\");\r\n        }\r\n\r\n        bcrypt.compare(password, admin.password, async function (error, result) {\r\n            try {\r\n                if (error) {\r\n                    return res.status(401).send({ status: false, message: error.message });\r\n                }\r\n\r\n                if (result) {\r\n                    let data = {};\r\n                    let date = Date.now();\r\n                    let issueTime = Math.floor(date / 1000);\r\n                    let token = jwt.sign(\r\n                        {\r\n                            email: admin.email,\r\n                            adminId: admin._id.toString(),\r\n                            iat: issueTime,\r\n                        },\r\n                        tokenSecretKey,\r\n                        { expiresIn: \"24h\" }\r\n                    );\r\n                    data._id = admin._id.toString();\r\n                    data.email = email;\r\n                    data.token = token;\r\n\r\n                    res.setHeader(\"Authorization\", \"Bearer \" + token);\r\n\r\n                    admin.sessionToken = generateRandomAlphaNumericID(51);\r\n                    await admin.save();\r\n\r\n                    return res.status(200).send({\r\n                        status: true,\r\n                        message: \"Successfully login\",\r\n                        data: data,\r\n                    });\r\n                } else {\r\n                    throw new Unauthorized(\"Login denied\", \"Invalid email or password\");\r\n                }\r\n            } catch (error) {\r\n                const metadata = {\r\n                    stack: error.stack,\r\n                    details: error.details || \"No additional details provided\",\r\n                    timestamp: new Date().toISOString(),\r\n                    ip: req.ip,\r\n                    method: req.method,\r\n                    url: req.originalUrl\r\n                };\r\n\r\n                logger.error(`Error in AdminLogin API => ${error.message}`, { meta: metadata });\r\n\r\n                if (error instanceof BadRequest || error instanceof Unauthorized) {\r\n                    return res.status(error.statusCode).send({ status: false, message: error.message, details: error.details });\r\n                }\r\n\r\n                const serverError = new InternalServerError(error.message);\r\n                return res.status(500).send({ status: false, message: serverError.message });\r\n            }\r\n        });\r\n\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n\r\n        logger.error(`Error in AdminLogin API: ${error.message}`, { meta: metadata });\r\n\r\n        if (error instanceof BadRequest) {\r\n            return res.status(error.statusCode).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        const serverError = new InternalServerError(error.message);\r\n        return res.status(500).send({ status: false, message: serverError.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL BOOKINGS OF AN USER\r\nconst getAllBookingsOfUser = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, userId } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let user = await userModel.findOne({ userId });\r\n\r\n            if (!user) {\r\n                return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n            }\r\n\r\n            let userAllBookings = await bookingModel.find({ userId });\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: userAllBookings,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        logger.error(`Get All Bookings of User API: Internal Server Error. \\n${error}`);\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE DAY REQUESTS\r\nconst getOneDayBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let date;\r\n            if (req.params.date) {\r\n                date = req.params.date;\r\n            } else {\r\n                let today = new Date(); // Use today's date if no date is provided\r\n                const year = today.getFullYear();\r\n                const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(today.getDate()).padStart(2, \"0\");\r\n\r\n                date = `${year}-${month}-${day}`;\r\n            }\r\n\r\n            let oneDayBookings = await bookingModel.find({ BookingDate: date });\r\n\r\n            let grandTotal = 0;\r\n            for (let booking of oneDayBookings) {\r\n                grandTotal += booking.grand_total;\r\n            };\r\n\r\n            let data = {\r\n                totalBookings: oneDayBookings,\r\n                oneDayRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE WEEK REQUESTS\r\nconst getOneWeekBookings = async (req, res) => {\r\n    try {\r\n        let { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let startDate;\r\n            let endDate;\r\n\r\n            if (req.params.startDate && req.params.endDate) {\r\n                startDate = req.params.startDate;\r\n                endDate = req.params.endDate;\r\n            } else {\r\n                const date = new Date();\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(date.getDate()).padStart(2, \"0\");\r\n\r\n                endDate = `${year}-${month}-${day}`;\r\n\r\n                const oneWeekAgo = new Date(date.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n                const startYear = oneWeekAgo.getFullYear();\r\n                const startMonth = String(oneWeekAgo.getMonth() + 1).padStart(2, \"0\");\r\n                const startDay = String(oneWeekAgo.getDate()).padStart(2, \"0\");\r\n\r\n                startDate = `${startYear}-${startMonth}-${startDay}`;\r\n            }\r\n\r\n            let oneWeekBookings = await bookingModel.find({\r\n                BookingDate: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneWeekBookings.length) {\r\n                for (let booking of oneWeekBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                }\r\n            }\r\n\r\n            let data = {\r\n                oneWeekBookings: oneWeekBookings,\r\n                grandTotal: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE MONTH REVENUE AND REQUESTS (ADMIN API)\r\nconst getOneMonthBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, month, year } = req.params;\r\n\r\n        if (!adminId || !sessionToken || !month || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-${month}-01`; // Month is zero-based index\r\n            const endDate = `${year}-${month}-31`;\r\n\r\n            const oneMonthBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n\r\n            if (oneMonthBookings.length) {\r\n                for (let booking of oneMonthBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                }\r\n            }\r\n\r\n            let data = {\r\n                oneMonthBookings: oneMonthBookings,\r\n                oneMonthRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE YEAR REQUESTS AND REVENUE (ADMIN API);\r\nconst getOneYearBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, year } = req.params;\r\n        if (!adminId || !sessionToken || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-01-01`; // January 1st of the provided year\r\n            const endDate = `${year}-12-31`; // December 31st of the provided year\r\n\r\n            let oneYearBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneYearBookings.length) {\r\n                for (let booking of oneYearBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                }\r\n            }\r\n\r\n            let data = {\r\n                oneYearRequests: oneYearBookings,\r\n                oneYearRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createAdmin,\r\n    adminLogin,\r\n    getAllBookingsOfUser,\r\n    getOneDayBookings,\r\n    getOneWeekBookings,\r\n    getOneMonthBookings,\r\n    getOneYearBookings,\r\n};\r\n","const categoryModel = require(\"../models/categoryModel\");\r\nconst itemModel = require(\"../models/itemModel\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\n\r\nconst { getCurrentIPAddress } = require(\"../utils/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\nconst NotFound = require(\"../errors/notFoundError\");\r\nconst BadRequest = require(\"../errors/badRequestError\");\r\nconst InternalServerError = require(\"../errors/internalServerError\");\r\nconst logger = require(\"../config/loggerConfig1\");\r\n\r\n// ADD CATEGORY\r\nconst addCategory = async (req, res) => {\r\n    try {\r\n        let { name, description } = req.body;\r\n\r\n        let { category_image } = req.files;\r\n\r\n        if (!category_image) {\r\n            // return res.status(400).send({ status: false, message: \"No category image uploaded\"});\r\n            throw new BadRequest(\"No category image uploaded\", \"category_image\");\r\n        }\r\n\r\n        let currApAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/categoryImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + category_image.name.split(\".\").pop();\r\n        let imgUrl = `http://${currApAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", imgUniqName);\r\n\r\n        category_image.mv(imgSavingPath, (err) => {\r\n            if (err) throw err;\r\n        });\r\n\r\n        let imgObj = {\r\n            fileName: imgUniqName,\r\n            filePath: imgUrl,\r\n        };\r\n\r\n        let categoryObj = {\r\n            name,\r\n            description,\r\n            category_image: imgObj,\r\n        };\r\n\r\n        let newCategory = await categoryModel.create(categoryObj);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: newCategory,\r\n        });\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        if (error instanceof BadRequest) {\r\n            logger.error(`Error in Add Category API: Bad Request. ${error.message}`, { meta: metadata });\r\n            return res.status(400).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        if (error instanceof InternalServerError) {\r\n            logger.error(`Error in Add Category API: Internal Server Error. ${error.message}`, { meta: metadata });\r\n            return res.status(500).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        if (error instanceof NotFound) {\r\n            logger.error(`Error in Add Category API: Not Found Error. ${error.message}`, { meta: metadata });\r\n            return res.status(500).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        logger.error(`Error in Add Category API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET CATEGORY BY ID\r\nconst getCategoryById = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n\r\n        if (!categoryId) {\r\n            // return res.status(400).send({ status: false, message: \"categoryId is required\"});\r\n            throw new BadRequest(categoryId, \"Please provide the categoryId\");\r\n        }\r\n\r\n        if (!isValidObjectId(categoryId)) {\r\n            // return res.status(400).send({ status: false, message: \"Invalid categoryId\"});\r\n            throw new BadRequest(categoryId, \"Invalid categoryId\");\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            // return res.status(400).send({ status: false, message: \"Category not found\"});\r\n            throw new NotFound(\"Category\", categoryId);\r\n        }\r\n\r\n        let allItems = await itemModel.find({ categoryId: category._id });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: category,\r\n            products: allItems,\r\n        });\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        if (error instanceof BadRequest) {\r\n            logger.error(`Error in Get Category API: Bad Request. ${error.message}`, { meta: metadata });\r\n            return res.status(400).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        if (error instanceof InternalServerError) {\r\n            logger.error(`Error in Get Category API: Internal Server Error. ${error.message}`, { meta: metadata });\r\n            return res.status(500).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        if (error instanceof NotFound) {\r\n            logger.error(`Error in Get Category API: Not Found Error. ${error.message}`, { meta: metadata });\r\n            return res.status(500).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        logger.error(`Error in Get Category API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CATEGORIES\r\nconst getAllCategories = async (req, res) => {\r\n    try {\r\n        let categories = await categoryModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: categories,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE CATEGORY\r\nconst updateCategory = async (req, res) => {\r\n    try {\r\n        const { categoryId } = req.params;\r\n\r\n        if (!categoryId) {\r\n            // return res.status(400).send({ status: false, message: \"categoryId is required\"});\r\n            throw new BadRequest(categoryId, \"Please provide the categoryId\");\r\n        }\r\n\r\n        if (!isValidObjectId(categoryId)) {\r\n            // return res.status(400).send({ status: false, message: \"Invalid categoryId\"});\r\n            throw new BadRequest(categoryId, \"Invalid categoryId\");\r\n        }\r\n\r\n        let c = await categoryModel.findById(categoryId);\r\n\r\n        if (!c) {\r\n            // return res.status(400).send({ status: false, message: \"Category not found\"});\r\n            throw new NotFound(\"category\", categoryId);\r\n        }\r\n\r\n        let e = req.body;\r\n\r\n        if (\"name\" in e) {\r\n            c.name = e.name;\r\n        }\r\n\r\n        if (\"description\" in e) {\r\n            c.description = e.description;\r\n        }\r\n\r\n        if (\"category_image\" in e || (req.files && req.files.category_image)) {\r\n            let { category_image } = req.files;\r\n\r\n            if (!category_image) {\r\n                // return res.status(400).send({ status: false, message: \"No category image uploaded\"});\r\n                throw new BadRequest(category_image, \"No category image uploaded\");\r\n            }\r\n\r\n            let oldImgName = c.category_image.fileName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", oldImgName);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            }\r\n\r\n            let currApAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/categoryImages/\";\r\n            let imgUniqName = uuid.v4() + \".\" + category_image.name.split(\".\").pop();\r\n            let imgPath = `http://${currApAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", imgUniqName);\r\n\r\n            category_image.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgPath,\r\n            };\r\n\r\n            c.category_image = imgObj;\r\n        }\r\n\r\n        await c.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category updated successfully\",\r\n            data: c,\r\n        });\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        if (error instanceof BadRequest) {\r\n            logger.error(`Error in Update Category API: Bad Request(Client Side Error). ${error.message}`, { meta: metadata });\r\n            return res.status(400).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        if (error instanceof InternalServerError) {\r\n            logger.error(`Error in Update Category API: Internal Server Error(Server Side Error). ${error.message}`, { meta: metadata });\r\n            return res.status(500).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        if (error instanceof NotFound) {\r\n            logger.error(`Error in Update Category API: Not Found Error. ${error.message}`, { meta: metadata });\r\n            return res.status(500).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        logger.error(`Error in Update Category API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE CATEGORY\r\nconst deleteCategory = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n\r\n        if (!categoryId) {\r\n            // return res.status(400).send({ status: false, message: \"catrgory Id is required\"});\r\n            throw new BadRequest(categoryId, \"Please provide the categoryId\");\r\n        }\r\n\r\n        if (!isValidObjectId(categoryId)) {\r\n            // return res.status(400).send({ status: false, messge: \"Invalid categoryId\"});\r\n            throw new BadRequest(categoryId, \"Invalid categoryId\");\r\n        }\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            // return res.status(400).send({ status: false, message: \"Category not found\"});\r\n            throw new NotFound(\"category\", categoryId);\r\n        }\r\n\r\n        let categoryImgName = category.category_image.fileName;\r\n        let categoryImgPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", categoryImgName);\r\n\r\n        if (fs.existsSync(categoryImgPath)) {\r\n            fs.unlinkSync(categoryImgPath);\r\n        }\r\n\r\n        await categoryModel.deleteOne({ _id: categoryId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        if (error instanceof BadRequest) {\r\n            logger.error(`Error in Delete Category API: Bad Request(Client Side Error). ${error.message}`, { meta: metadata });\r\n            return res.status(400).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        if (error instanceof InternalServerError) {\r\n            logger.error(`Error in Delete Category API: Internal Server Error(Server Side Error). ${error.message}`, { meta: metadata });\r\n            return res.status(500).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        if (error instanceof NotFound) {\r\n            logger.error(`Error in Delete Category API: Not Found Error. ${error.message}`, { meta: metadata });\r\n            return res.status(500).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        logger.error(`Error in Delete Category API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addCategory,\r\n    getCategoryById,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n};\r\n","const customerModel = require(\"../models/customerModel\");\r\nconst logger = require(\"../config/loggerConfig1\");\r\n\r\n// LOGIN CUSTOMER\r\nconst loginCustomer = async (req, res) => {\r\n    try {\r\n        let { customerId, dialingCode, mobile, HCFToken } = req.body;\r\n\r\n        let customer = await customerModel.findOne({\r\n            customerId: customerId,\r\n            mobile: mobile,\r\n        });\r\n\r\n        if (!customer) {\r\n            let loginData = {\r\n                customerId,\r\n                dialingCode,\r\n                mobile,\r\n                HCFToken,\r\n            };\r\n\r\n            let newcustomerData = await customerModel.create(loginData);\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Login successfully\",\r\n                loginData: newcustomerData,\r\n            });\r\n        } else {\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Login successfully\",\r\n                loginData: customer,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in loginCustomer API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL CUSTOMER\r\nconst getAllCustomers = async (req, res) => {\r\n    try {\r\n        let customers = await customerModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: customers,\r\n        });\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in loginCustomer API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET CUSTOMER BY ID\r\nconst getCustomerById = async (req, res) => {\r\n    try {\r\n        let { customerId } = req.params;\r\n\r\n        if (!customerId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"customerId is required\",\r\n            });\r\n        }\r\n\r\n        let customer = await customerModel.findOne({ customerId });\r\n\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"customer not found\" });\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n        });\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in loginCustomer API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE CUSTOMER\r\nconst updateCustomerById = async (req, res) => {\r\n    try {\r\n        let { customerId } = req.params;\r\n\r\n        if (!customerId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"customerId is required\",\r\n            });\r\n        }\r\n\r\n        let customer = await customerModel.findOne({ customerId });\r\n\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer Not found\" });\r\n        }\r\n\r\n        let body = req.body;\r\n\r\n        if (\"name\" in body) {\r\n            customer.name = body.name;\r\n        }\r\n\r\n        if (\"email\" in body) {\r\n            customer.email = body.email;\r\n        }\r\n\r\n        if (\"gender\" in body) {\r\n            customer.gender = body.gender;\r\n        }\r\n\r\n        if (\"DOB\" in body) {\r\n            customer.DOB = body.DOB;\r\n        }\r\n\r\n        if (\"address\" in body) {\r\n            customer.address = body.address;\r\n        }\r\n\r\n        await customer.save();\r\n\r\n        return res.status(200).send({ status: true, message: \"success\", data: customer });\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in loginCustomer API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE CUSTOMER BY CUSTOMER ID\r\nconst deleteCustomerById = async (req, res) => {\r\n    try {\r\n        let { customerId } = req.params;\r\n\r\n        let { question, feedback } = req.body;\r\n\r\n        let customer = await customerModel.findOne({ customerId });\r\n\r\n        if (!customer) {\r\n            return res.status(404).send({ status: false, message: \"Customer not found\" });\r\n        }\r\n\r\n        let deleteCustomer = await customerModel.deleteOne({customerId});\r\n        if (!deleteCustomer) {\r\n            return res.status(404).send({ status: false, message: \"Customer already deleted\" });\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"customer deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in loginCustomer API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    loginCustomer,\r\n    getAllCustomers,\r\n    getCustomerById,\r\n    updateCustomerById,\r\n    deleteCustomerById\r\n};\r\n","const restaurantModel = require('../models/restaurantModel');\r\nconst orderModel = require('../models/orderModel');\r\nconst { getCurrentIPAddress } = require(\"../utils/utils\");\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require('../config/loggerConfig1');\r\n\r\n\r\n// CREATE DASHBOARD\r\nconst createDashboard = async (req, res) => {\r\n    try {\r\n\r\n        const { customerId } = req.params;\r\n\r\n        let myOrders = null;\r\n        if (customerId) {\r\n            myOrders = await orderModel.find({ customerId });\r\n        };\r\n        \r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: {\r\n                myOrders: myOrders\r\n            }\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n        logger.error(`Error in getDashboard API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n\r\n// DASHBOARD API\r\nconst getDashboard = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"UserId is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant not found\"});\r\n        };\r\n\r\n        let bannerImages = restaurant.banners;\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            banners: bannerImages\r\n        });\r\n        \r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n        logger.error(`Error in getDashboard API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL BANNER IMGAES\r\nconst getAllBannerImages = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant not found\"});\r\n        };\r\n\r\n        let bannerImages = restaurant.banners;\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            banners: bannerImages\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date.toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n        logger.error(`Error in getAllBannerImages API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE BANNER IMAGES\r\nconst updateBannerImages = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        }\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        // }\r\n\r\n        let restaurant = await restaurantModel.findOne({userId});\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant Not found\"});\r\n        };\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let bannerImage = req.files.bannerImage;\r\n\r\n        if (!bannerImage) {\r\n            return res.status(400).send({ status: false, message: \"No banner image uploaded\" });\r\n        }\r\n\r\n        let index = parsedData.index; //{\"isNewPick\":false,\"index\":1,\"img_id\":\"64ffebc1f3bfc5d77220193b\",\"imageName\":\"1694493633669-432139964.jpg\"}\r\n        let img_id = parsedData.img_id ? parsedData.img_id : \"\";\r\n        let imageName = parsedData.imageName;\r\n        let isNewPick = parsedData.isNewPick;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/bannerImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + bannerImage.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImage = restaurant.banners[index].imageName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", oldImage);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n            \r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let updatedBannerObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            restaurant.banners[index] = updatedBannerObj;\r\n\r\n            await restaurant.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner updated successfully\",\r\n                banners: restaurant.banners,\r\n            });\r\n        } else {\r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let newBannerObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            // bannerObj.bannerImages.push(newBannerObj);\r\n            restaurant.banners.push(newBannerObj);\r\n\r\n            await restaurant.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner added successfully\",\r\n                banners: restaurant.banners,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additioanl details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n        logger.error(`Error in updateBannerImages API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// DELETE BANNER IMAGE BY ID\r\nconst deleteBannerImage = async (req, res) => {\r\n    try {\r\n        let { userId, imageId } = req.params;\r\n        if (!userId || !imageId ) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        // };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Not Found!!!\" });\r\n        }\r\n\r\n        if (restaurant.banners.length) {\r\n            for (let i = 0; i < restaurant.banners.length; i++) {\r\n                if (imageId === restaurant.banners[i]._id.toString()) {\r\n                    let arr = restaurant.banners;\r\n                    arr.splice(i, 1);\r\n                    restaurant.banners = arr;\r\n\r\n                    await restaurant.save();\r\n                };\r\n            };\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Banner deleted successfully\",\r\n            banners: restaurant.banners,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n        logger.error(`Error in deleteBannerImage API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    createDashboard,\r\n    getDashboard,\r\n    updateBannerImages,\r\n    deleteBannerImage,\r\n    getAllBannerImages\r\n};\r\n","const itemModel = require(\"../models/itemModel\");\r\nconst restaurantModel = require(\"../models/restaurantModel\");\r\nconst ratingModel = require('../models/ratingModel');\r\nconst { calculateDistance } = require(\"./restaurantController\");\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../utils/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\nconst { adminSecretKey } = require(\"../config/config\");\r\nconst logger = require(\"../config/loggerConfig1\");\r\n\r\n// ADD ITEMS IN MENU\r\nconst addItems = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"User Id is required\" });\r\n        }\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant Not Found\" });\r\n        }\r\n\r\n        let { menuId, item_name, menuName, description, selling_price, isTaxable, preparing_time, notes, visit_count, status, seo_keywords, video_link, isVeg } = req.body;\r\n\r\n        let itemData = {\r\n            userId,\r\n            menuId,\r\n            item_name,\r\n            menuName,\r\n            description,\r\n            selling_price,\r\n            isTaxable,\r\n            preparing_time,\r\n            notes,\r\n            visit_count,\r\n            status,\r\n            seo_keywords,\r\n            video_link: video_link ? video_link : \"\",\r\n            isVeg,\r\n        };\r\n\r\n        let product = await itemModel.create(itemData);\r\n\r\n        // Calculate average rating and total rating counts\r\n        const ratings = await ratingModel.aggregate([\r\n            { $match: { productId: product._id } },\r\n            {\r\n                $group: {\r\n                    _id: null,\r\n                    averageRating: { $avg: \"$customers.rating\" },\r\n                    totalRatingCount: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        const averageRating = ratings.length > 0 ? ratings[0].averageRating : 0;\r\n        const totalRatingCount = ratings.length > 0 ? ratings[0].totalRatingCount : 0;\r\n\r\n        // Update the averageRating and totalRatingCount fields in the product\r\n        product.averageRating = averageRating;\r\n        product.totalRatingCount = totalRatingCount;\r\n        await product.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Item Added Successfully\",\r\n            product,\r\n            averageRating,\r\n            totalRatingCount,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// ADD / UPDATE ITEM IMAGES\r\nconst addUpdateItemImages = async (req, res) => {\r\n    try {\r\n        let { itemId } = req.params;\r\n\r\n        if (!itemId) {\r\n            return res.status(400).send({ status: false, message: \"Item Id is required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(itemId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid itemId\" });\r\n        }\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item Not Found\" });\r\n        }\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let itemImage = req.files.itemImage;\r\n\r\n        if (!itemImage) {\r\n            return res.status(400).send({ status: false, message: \"No item image uploaded\" });\r\n        }\r\n\r\n        let { index, img_id, imageName, isNewPick } = parsedData;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/itemImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + itemImage.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"itemImages\", imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImageName = item.item_images[index].imgName;\r\n            let oldImagePath = path.join(__dirname, \"..\", \"..\", \"itemImages\", oldImageName);\r\n\r\n            if (fs.existsSync(oldImagePath)) {\r\n                fs.unlinkSync(oldImagePath);\r\n            }\r\n\r\n            itemImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            item.item_images[index] = imgObj;\r\n\r\n            await item.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Item image updated successfully\",\r\n                data: item.item_images,\r\n            });\r\n        } else {\r\n            itemImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let newImgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            item.item_images.push(newImgObj);\r\n\r\n            await item.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Item image added successfully\",\r\n                data: item.item_images,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE ITEM IMAGES\r\nconst deleteItemImages = async (req, res) => {\r\n    try {\r\n        let { itemId, imageId } = req.params;\r\n\r\n        if ((!itemId, !imageId)) {\r\n            return res.status(400).send({ status: false, message: \"all fields are required\" });\r\n        }\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item not found\" });\r\n        }\r\n\r\n        if (item.item_images.length) {\r\n            for (let i = 0; i < item.item_images.length; i++) {\r\n                if (imageId === item.item_images[i]._id.toString()) {\r\n                    let arr = item.item_images;\r\n                    arr.splice(i, 1);\r\n                    item.item_images = arr;\r\n                    await item.save();\r\n                }\r\n            }\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Image deleted successfully\",\r\n            data: item.item_images,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL ITEMS\r\nconst getAllItems = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"UserId is required\" });\r\n        }\r\n\r\n        let items = await itemModel.find({ userId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: items,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ITEM BY ITEM ID\r\nconst getItemById = async (req, res) => {\r\n    try {\r\n        const { itemId, userId } = req.params;\r\n\r\n        if (!itemId || !userId) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(itemId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Item Id\" });\r\n        }\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item Not Found\" });\r\n        }\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"restaurant Not Found\" });\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            restaurant,\r\n            product: item,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in authenticateAdmin API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ITEMS BY SEARCH KEYWORDS\r\nconst getItemsBySearchKeywords = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n\r\n        let { search_data } = req.body;\r\n\r\n        if (categoryId) {\r\n            let items = await itemModel.find({ categoryId });\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: items,\r\n            });\r\n        } else {\r\n            let filter = {\r\n                $or: [\r\n                    { item_name: { $regex: search_data, $options: i } },\r\n                    { description: { $regex: search_data, $options: i } },\r\n                    { menuName: { $regex: search_data, $options: i } },\r\n                    { isVeg: { $regex: search_data, $options: i } },\r\n                ],\r\n            };\r\n\r\n            let items = await itemModel.find(filter);\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: items,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getItemsBySearchKeywords API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ITEM BY LOCATION OR SEARCH DATA\r\nconst getItemsByLocationOrSearchData = async (req, res) => {\r\n    try {\r\n        let { BY_LOCATION } = req.params;\r\n\r\n        let e = req.body;\r\n\r\n        let { search_data } = e;\r\n\r\n        if (!BY_LOCATION && !search_data) {\r\n            let items = await itemModel.aggregate([{ $sample: { size: 10 } }]);\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"success\",\r\n                data: items,\r\n            });\r\n        } else if (BY_LOCATION && !search_data) {\r\n            let latitude = e.latitude ? e.latitude : null;\r\n            let longitude = e.longitude ? e.longitude : null;\r\n\r\n            let allRestaurants = await restaurantModel.find({});\r\n\r\n            let itemArr = [];\r\n\r\n            if (allRestaurants.length) {\r\n                for (let restaurant of allRestaurants) {\r\n                    let distance = null;\r\n                    let items = [];\r\n                    if (latitude && longitude && restaurant.location.latitude && restaurant.location.longitude) {\r\n                        distance = calculateDistance(latitude, longitude, restaurant.location.latitude, restaurant.location.longitude);\r\n                    }\r\n\r\n                    items = await itemModel.find({}).limit(5);\r\n\r\n                    let itemObj = {\r\n                        items,\r\n                        distance,\r\n                    };\r\n\r\n                    itemArr.push(itemObj);\r\n                }\r\n\r\n                itemArr.sort((a, b) => a.distance - b.distance);\r\n\r\n                console.log(\"inside location block\", itemArr);\r\n\r\n                // let items = [];\r\n                // for (let item of itemArr) {\r\n                //     items.push(...item.items);\r\n                // }\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"success\",\r\n                    data: itemArr,\r\n                });\r\n            }\r\n        } else if (!BY_LOCATION && search_data) {\r\n            let filter = {\r\n                $or: [\r\n                    { item_name: { $regex: search_data, $options: i } },\r\n                    { description: { $regex: search_data, $options: i } },\r\n                    { menuName: { $regex: search_data, $options: i } },\r\n                    { isVeg: { $regex: search_data, $options: i } },\r\n                ],\r\n            };\r\n\r\n            let items = await itemModel.find(filter);\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: items,\r\n            });\r\n        } else if (BY_LOCATION && search_data) {\r\n            let latitude = e.latitude ? e.latitude : null;\r\n            let longitude = e.longitude ? e.longitude : null;\r\n\r\n            let allRestaurants = await restaurantModel.find({});\r\n\r\n            let itemArr = [];\r\n            if (allRestaurants.length) {\r\n                for (let restaurant of allRestaurants) {\r\n                    let distance = null;\r\n                    let items = [];\r\n                    if (latitude && longitude && restaurant.location.latitude && restaurant.location.longitude) {\r\n                        distance = calculateDistance(latitude, longitude, restaurant.location.latitude, restaurant.location.longitude);\r\n                        // console.log(\"items\", items);\r\n                    }\r\n\r\n                    let filter = {\r\n                        $or: [\r\n                            { item_name: { $regex: search_data, $options: \"i\" } },\r\n                            { description: { $regex: search_data, $options: \"i\" } },\r\n                            { menuName: { $regex: search_data, $options: \"i\" } },\r\n                            { isVeg: { $regex: search_data, $options: \"i\" } },\r\n                        ],\r\n                    };\r\n\r\n                    items = await itemModel.find(filter).limit(5);\r\n\r\n                    let itemObj = {\r\n                        items,\r\n                        distance,\r\n                    };\r\n\r\n                    itemArr.push(itemObj);\r\n                }\r\n\r\n                itemArr.sort((a, b) => a.distance - b.distance);\r\n\r\n                // console.log(\"Inside both data\", itemArr);\r\n\r\n                let items = [];\r\n                for (let item of itemArr) {\r\n                    items.push(...item.items);\r\n                }\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"success\",\r\n                    data: items,\r\n                });\r\n            }\r\n        };\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getItemsByLocationOrSearchData API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE ITEM BY ITEM ID\r\nconst updateItemById = async (req, res) => {\r\n    try {\r\n        let { itemId } = req.params;\r\n\r\n        if (!itemId) {\r\n            return res.status(400).send({ status: false, message: \"Item Id is required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(itemId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Item Id\" });\r\n        }\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item Not Found\" });\r\n        }\r\n\r\n        let e = req.body;\r\n\r\n        if (\"item_name\" in e) {\r\n            item.item_name = e.item_name;\r\n        }\r\n\r\n        if (\"description\" in e) {\r\n            item.description = e.description;\r\n        }\r\n\r\n        if (\"selling_price\" in e) {\r\n            item.selling_price = e.selling_price;\r\n        }\r\n\r\n        if (\"isTaxable\" in e) {\r\n            item.isTaxable = e.isTaxable;\r\n        }\r\n\r\n        if (\"preparing_time\" in e) {\r\n            item.preparing_time = e.preparing_time;\r\n        }\r\n\r\n        if (\"notes\" in e) {\r\n            item.notes = e.notes;\r\n        }\r\n\r\n        if (\"visit_count\" in e) {\r\n            item.visit_count = e.visit_count;\r\n        }\r\n\r\n        if (\"status\" in e) {\r\n            item.status = e.status;\r\n        }\r\n\r\n        if (\"seo_keywords\" in e) {\r\n            item.seo_keywords = e.seo_keywords;\r\n        }\r\n\r\n        if (\"video_link\" in e) {\r\n            item.video_link = e.video_link;\r\n        }\r\n\r\n        if (\"isVeg\" in e) {\r\n            item.isVeg = e.isVeg;\r\n        }\r\n\r\n        await item.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Item Updated Successfully\",\r\n            data: item,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateItemById API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE ITEM BY ITEM ID\r\nconst deleteItemById = async (req, res) => {\r\n    try {\r\n        const { itemId } = req.params;\r\n\r\n        if (!itemId) {\r\n            return res.status(400).send({ status: false, message: \"Item Id is required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(itemId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Item Id\" });\r\n        }\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item Not Found\" });\r\n        }\r\n\r\n        let oldImgName = item.item_images.imgName;\r\n\r\n        if (oldImgName) {\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"items\", oldImgName);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            }\r\n        }\r\n\r\n        await itemModel.deleteOne({ _id: itemId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Item deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteItemById API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addItems,\r\n    addUpdateItemImages,\r\n    deleteItemImages,\r\n    getAllItems,\r\n    getItemById,\r\n    getItemsBySearchKeywords,\r\n    updateItemById,\r\n    deleteItemById,\r\n    getItemsByLocationOrSearchData,\r\n};\r\n","const menuModel = require(\"../models/menuModel\");\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../utils/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst restaurantModel = require(\"../models/restaurantModel\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require(\"../config/loggerConfig1\");\r\n\r\n// ADD MENU\r\nconst addMenu = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"User Id is required\" });\r\n        }\r\n\r\n        let { title, description, isActive } = req.body;\r\n\r\n        if (!title || !description) {\r\n            return res.status(400).send({ status: false, message: \"all fields are required\" });\r\n        }\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant not found\" });\r\n        }\r\n\r\n        // let { thumbnail } = req.files;\r\n\r\n        let { File_Extension, File_Path, File_data, File_name } = req.body.thumbnail;\r\n\r\n        let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/menuImages/\";\r\n        let imgUniqName = uuid.v4() + File_Extension;\r\n        let imgUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"menuImages\", imgUniqName);\r\n\r\n        fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n        let thumbnailObj = {\r\n            fileName: imgUniqName,\r\n            filePath: imgUrl,\r\n        };\r\n\r\n        let menuData = {\r\n            title,\r\n            description,\r\n            thumbnail: thumbnailObj,\r\n            isActive,\r\n            userId,\r\n        };\r\n\r\n        let newMenu = await menuModel.create(menuData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Menu added successfully\",\r\n            data: newMenu,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details,\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in addMenu API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL MENUS\r\nconst getAllMenus = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\" });\r\n        }\r\n\r\n        let allMenus = await menuModel.find({ userId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            munus: allMenus,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getAllMenus API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET MENU BY MENUID\r\nconst getMenuById = async (req, res) => {\r\n    try {\r\n        let { menuId } = req.params;\r\n        if (!menuId) {\r\n            return res.status(400).send({ status: false, message: \"menuId is required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(menuId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid menuId\" });\r\n        }\r\n\r\n        let menu = await menuModel.findById(menuId);\r\n\r\n        if (!menu) {\r\n            return res.status(400).send({ status: false, message: \"Menu not found\" });\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: menu,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details,\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getMenuById API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE MENU\r\nconst updateMenu = async (req, res) => {\r\n    try {\r\n        const { menuId } = req.params;\r\n        if (!menuId) {\r\n            return res.status(400).send({ status: false, message: \"menuId is required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(menuId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid menuId\" });\r\n        }\r\n\r\n        let menu = await menuModel.findById(menuId);\r\n\r\n        if (!menu) {\r\n            return res.status(400).send({ status: false, message: \"Menu not found\" });\r\n        }\r\n\r\n        let ele = req.body;\r\n\r\n        if (\"title\" in ele) {\r\n            menu.title = ele.title;\r\n        }\r\n\r\n        if (\"description\" in ele) {\r\n            menu.description = ele.description;\r\n        }\r\n\r\n        if (\"isActive\" in ele) {\r\n            menu.isActive = ele.isActive;\r\n        }\r\n\r\n        if (\"thumbnail\" in ele) {\r\n            let oldImg = menu.thumbnail.imgName;\r\n\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"menus\", oldImg);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            }\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.thumbnail;\r\n\r\n            let decodedImg = Buffer.from(File_data, \"base64\");\r\n\r\n            let imgRelativePath = \"/menus/\";\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"menus\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedImg);\r\n\r\n            let imgObj = {\r\n                imgName: imgUniqName,\r\n                imgPath: imgUrl,\r\n            };\r\n\r\n            menu.thumbnail = imgObj;\r\n        }\r\n\r\n        await menu.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Menu updated successfully\",\r\n            data: menu,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in updateMenu API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE MENU BY ID\r\nconst deleteMenu = async (req, res) => {\r\n    try {\r\n        const { menuId } = req.params;\r\n        if (!menuId) {\r\n            return res.status(400).send({ status: false, message: \"menuId is required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(menuId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid menuId\" });\r\n        }\r\n\r\n        let menu = await menuModel.findById(menuId);\r\n\r\n        if (!menu) {\r\n            return res.status(400).send({ status: false, message: \"Menu not found\" });\r\n        }\r\n\r\n        let oldImg = menu.thumbnail.imgName;\r\n\r\n        let oldImgPath = path.join(__dirname, \"..\", \"..\", \"menus\", oldImg);\r\n\r\n        if (fs.existsSync(oldImgPath)) {\r\n            fs.unlinkSync(oldImgPath);\r\n        }\r\n\r\n        await menuModel.deleteOne({ _id: menuId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Menu deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in deleteMenu API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addMenu,\r\n    getAllMenus,\r\n    getMenuById,\r\n    updateMenu,\r\n    deleteMenu,\r\n};\r\n","const { isValidObjectId } = require(\"mongoose\");\r\nconst orderModel = require(\"../models/orderModel\");\r\nconst restaurantModel = require(\"../models/restaurantModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\n\r\nconst uuid = require('uuid');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nlet { getCurrentIPAddress, generateRandomNumericId } = require('../utils/utils');\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidStatus } = require(\"../utils/utils\");\r\n\r\n// CREATE ORDER\r\nconst createOrder = async (req, res) => {\r\n    try {\r\n        const { customerId } = req.params;\r\n\r\n        if (!customerId) {\r\n            return res.status(400).send({ status: false, message: \"Customer Id Id is required\" });\r\n        };\r\n\r\n        let customer = await customerModel.findOne({ customerId });\r\n\r\n        if (!customer) {\r\n            return res.status(400).send({ status: false, message: \"Customer not found\" });\r\n        };\r\n\r\n        let { \r\n            f_name,\r\n            l_name,\r\n            email, \r\n            mobile,\r\n            address,\r\n            apartment,\r\n            city,\r\n            post_code,\r\n            state,\r\n            state_code,\r\n            countryCode,\r\n            countryName,\r\n            productList,\r\n            totalProduct,\r\n            tax,\r\n            CGST,\r\n            SGST,\r\n            total,\r\n            grandTotal,\r\n            question,\r\n            feedback\r\n        } = req.body;\r\n\r\n        let items = [];\r\n\r\n        for (let itemData of productList) {\r\n            let { \r\n                productId, \r\n                restaurant_id, \r\n                MrpTotal, \r\n                SubTotal, \r\n                qty, \r\n                isVeg, \r\n                isTaxable,\r\n                averageRating,\r\n                preparing_time,\r\n                cartQty,\r\n                description,\r\n                mrp,\r\n                name,\r\n                salePrice,\r\n                skuCode,\r\n                thumbnail,\r\n                totalRatingCount\r\n            } = itemData;\r\n\r\n            items.push({\r\n                productId, \r\n                restaurant_id, \r\n                MrpTotal, \r\n                SubTotal, \r\n                qty, \r\n                isVeg, \r\n                isTaxable,\r\n                averageRating,\r\n                preparing_time,\r\n                cartQty,\r\n                description,\r\n                mrp,\r\n                name,\r\n                salePrice,\r\n                skuCode,\r\n                thumbnail,\r\n                totalRatingCount\r\n            });\r\n        };\r\n\r\n        let orderData = {\r\n            orderID: generateRandomNumericId(10),\r\n            customerId,\r\n            f_name,\r\n            l_name,\r\n            email, \r\n            mobile,\r\n            address,\r\n            apartment,\r\n            city,\r\n            post_code,\r\n            state,\r\n            state_code,\r\n            countryCode,\r\n            countryName,\r\n            productList,\r\n            totalProduct,\r\n            tax,\r\n            CGST,\r\n            SGST,\r\n            total,\r\n            grandTotal,\r\n            question,\r\n            feedback\r\n        };\r\n\r\n        let newOrder = await orderModel.create(orderData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order created successfully\",\r\n            data: newOrder,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL ORDERS\r\nconst getAllOrders = async (req, res) => {\r\n    try {\r\n        let { restaurantId } = req.params;\r\n\r\n        if (!restaurantId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Restaurant Id is required\"\r\n            });\r\n        };\r\n\r\n        let orders = await orderModel.find({ 'productList.restaurant_id': restaurantId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: orders,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ORDER BY ORDER ID\r\nconst getOrderById = async (req, res) => {\r\n    try {\r\n        let { orderId } = req.params;\r\n\r\n        if (!orderId) {\r\n            return res.status(400).send({ status: false, message: \"Order Id is required\" });\r\n        };\r\n\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Order Id\" });\r\n        };\r\n\r\n        let order = await orderModel.findById(orderId);\r\n\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Order not found\"});\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: order,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message }); \r\n    }\r\n};\r\n\r\n\r\n// UPDATE ORDER\r\nconst updateOrderById = async (req, res) => {\r\n    try {\r\n        const { orderId, restaurant_id, customer_name } = req.params;\r\n        if (!orderId) {\r\n            return res.status(400).send({ status: false, message: \"OrderId is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid OrderId\"});\r\n        };\r\n\r\n        let order = await orderModel.findById(orderId);\r\n\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Order not found\"});\r\n        };\r\n\r\n        let restaurant;\r\n        if (restaurant_id) {\r\n            restaurant = await restaurantModel.findOne({ userId: restaurant_id });\r\n\r\n            if (!restaurant) {\r\n                return res.status(400).send({ status: false, message: \"Restaurant Not Found\" });\r\n            };\r\n        };\r\n\r\n        let flag = restaurant ? restaurant : customer_name;\r\n\r\n        let e = req.body;\r\n\r\n        if (\"table_name\" in e) {\r\n            order.table_name = e.table_name;\r\n        };\r\n\r\n        if (\"customer_name\" in e) {\r\n            order.customer_name = e.customer_name;\r\n        };\r\n\r\n        if (\"customer_mobile\" in e) {\r\n            order.customer_mobile = e.customer_mobile;\r\n        };\r\n\r\n        if (\"head_count\" in e) {\r\n            order.head_count = e.head_count;\r\n        };\r\n\r\n        if (\"status\" in e) {\r\n            order.status = e.status;\r\n        };\r\n\r\n        if (\"notes\" in e) {\r\n            order.notes = e.notes;\r\n        };\r\n\r\n        if (\"item_list\" in e) {\r\n            if (order.item_list.length) {\r\n                for (let item of order.item_list) {\r\n                    if (\"item_name\" in e.item_list) {\r\n                        item.item_name = e.item_list.item_name;\r\n                    };\r\n\r\n                    if (\"qty\" in e.item_list) {\r\n                        item.qty = e.item_list.qty;\r\n                    };\r\n\r\n                    if (\"selling_price\" in e.item_list) {\r\n                        item.selling_price = e.item_list.selling_price;\r\n                    };\r\n\r\n                    if (\"isTaxable\" in e.item_list) {\r\n                        item.isTaxable = e.item_list.isTaxable;\r\n                    };\r\n\r\n                    if (\"isVeg\" in e.item_list) {\r\n                        item.isVeg = e.item_list.isVeg;\r\n                    };\r\n                }\r\n            }  \r\n        };\r\n\r\n        if (\"total_items\" in e) {\r\n            order.total_items = e.total_items;\r\n        };\r\n\r\n        if (\"tax\" in e) {\r\n            order.tax = e.tax;\r\n        };\r\n\r\n        if (\"question\" in e) {\r\n            order.question = e.question;\r\n        };\r\n\r\n        if (\"feedback\" in e) {\r\n            order.feedback = e.feedback;\r\n        };\r\n\r\n        await order.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order updated successfully\",\r\n            data: order,\r\n            canceledBy: flag,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE ORDER BY ID\r\nconst deleteOrderById = async (req, res) => {\r\n    try {\r\n        let { orderId } = req.params;\r\n        if (!orderId) {\r\n            return res.status(400).send({ status: false, message: \"OrderId is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid OrderId\"});\r\n        };\r\n\r\n        let order = await orderModel.findById(orderId);\r\n\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Order not found\"});\r\n        };\r\n\r\n        await orderModel.deleteOne({ _id: orderId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order deleted successfully\",\r\n        })\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// UPDATE ORDER BY ORDERID\r\nconst updateOrderStatus = async (req, res) => {\r\n    try {\r\n      let orderId = req.params.orderId;\r\n  \r\n      let order = await orderModel.findOne({ _id: orderId });\r\n  \r\n      if (!order) {\r\n        return res\r\n          .status(404)\r\n          .send({ status: false, message: \"Order Not found\" });\r\n      }\r\n  \r\n      let body = req.body;\r\n  \r\n      if (\"status\" in body) {\r\n        order.status = body.status;\r\n      }\r\n  \r\n      await order.save();\r\n      return res\r\n        .status(200)\r\n        .send({ \r\n            status: true, \r\n            message: \"Order status updated successfully\", \r\n            orderStatus: body.status\r\n        });\r\n    } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n  };\r\n\r\n\r\n// CANCEL ORDER\r\nconst cancelOrder = async (req, res) => {\r\n    try {\r\n        let { orderId } = req.params;\r\n        if (orderId) {\r\n            return res.status(400).send({ status: false, message: \"OrderId is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid orderId\" });\r\n        };\r\n\r\n        let order = await orderModel.findById(orderId);\r\n\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Order Not found\"});\r\n        };\r\n\r\n        if (order.status === \"CANCELED\") {\r\n            return res.status(400).send({ status: false, message: \"This order is already canceled\"});\r\n        };\r\n\r\n        let { status, restaurant_id, customer_mobile, customer_name } = req.body;\r\n\r\n        let restaurant = null;\r\n        if (restaurant_id) {\r\n            restaurant = await restaurantModel.findOne({ userId: restaurant_id });\r\n        };\r\n\r\n        let flag = restaurant ? restaurant.restaurantName : customer_name;\r\n\r\n        order.status = status;\r\n\r\n        await order.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order Canceled Successfully\",\r\n            data: order,\r\n            canceledBy: flag,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// CANCEL ORDER BY ORDER ID\r\nconst cancelOrderById = async (req, res) => {\r\n    try {\r\n      let orderId = req.params.orderId;\r\n  \r\n      let data = req.body;\r\n  \r\n      let { status, question, feedback } = data;\r\n  \r\n      let order = await orderModel.findOne({ _id: orderId });\r\n  \r\n      if (!order) {\r\n        return res\r\n          .status(404)\r\n          .send({ status: false, message: \"Order not found\" });\r\n      }\r\n  \r\n      if (!isValidStatus(status)) {\r\n        return res.status(400).send({\r\n          status: false,\r\n          message:\r\n            'status should be only - \"Pending\", \"Approved\", \"Rejected\", \"Shipped\", \"Completed\", or \"Cancel\"',\r\n        });\r\n      }\r\n  \r\n      if (order.status === \"Cancel\") {\r\n        return res\r\n          .status(400)\r\n          .send({ status: false, message: \"This order is already cancelled\" });\r\n      }\r\n\r\n      if (order.status === \"Rejected\") {\r\n        return res\r\n          .status(400)\r\n          .send({ status: false, message: \"This order is already Rejected\" });\r\n      }\r\n\r\n      let statusArr = [\"Cancel\", \"Rejected\"];\r\n\r\n      if (!statusArr.includes(status)) {\r\n        return res\r\n          .status(400)\r\n          .send({ status: false, message: \"Order status can be only 'Cancel' or 'Rejected'\" });\r\n      };\r\n  \r\n      let orderStatus = await orderModel.findOneAndUpdate(\r\n        { _id: orderId },\r\n        { $set: { status: status, question: question, feedback: feedback } },\r\n        { new: true }\r\n      );\r\n  \r\n      await order.save();\r\n  \r\n      return res\r\n        .status(200)\r\n        .send({\r\n          status: true,\r\n          message: \"Order cancelled successfully\",\r\n          orderStatus: status,\r\n        });\r\n    } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n  };\r\n\r\n\r\n// UPDATE ORDER BY RESTAURANT\r\nconst updateOrderByRestaurant = async (req, res) => {\r\n    try {\r\n        let { orderId } = req.params;\r\n\r\n        if (!orderId) {\r\n            return res.status(400).send({ status: false, message: \"Order Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(orderId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid orderId\"});\r\n        };\r\n\r\n        let order = await orderModel.findById(orderId);\r\n        if (!order) {\r\n            return res.status(400).send({ status: false, message: \"Order not found\"});\r\n        };\r\n\r\n        let { status } = req.body;\r\n\r\n        if (order.status === \"CANCELED\") {\r\n            return res.status(400).send({ status: false, message: \"This order is already canceled\"});\r\n        }\r\n\r\n        order.status = status\r\n\r\n        await order.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Order updated successfully\",\r\n            order: order,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// UPLOAD ITEMS IMAGES\r\nconst uploadItemImages = async (req, res) => {\r\n    try {\r\n        let { itemId } = req.params;\r\n\r\n        if (!itemId) {\r\n            return res.status(400).send({ status: false, message: \"Item Id is required\"});\r\n        };\r\n\r\n        let item = await itemModel.findById(itemId);\r\n\r\n        if (!item) {\r\n            return res.status(400).send({ status: false, message: \"Item not found\"});\r\n        };\r\n\r\n        let itemImages = Array.isArray(req.files.itemImages) ? req.files.itemImages : [req.files.itemImages];\r\n\r\n        if (!itemImages.length === 0) {\r\n            return res.status(400).send({ status: false, message: \"No item image uploaded\"});\r\n        };\r\n\r\n        let itemImgArr = [];\r\n\r\n        for (let img of itemImages) {\r\n            let imgRelativePath = \"/items/\";\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgUniqName = uuid.v4() + \".\" + img.name.split(\".\").pop();\r\n            let imgUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"items\", imgUniqName);\r\n\r\n            img.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let imgObj = {\r\n                imgName: imgUniqName,\r\n                imgUrl: imgUrl\r\n            };\r\n\r\n            itemImgArr.push(imgObj);\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: item,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    createOrder,\r\n    getAllOrders,\r\n    getOrderById,\r\n    updateOrderById,\r\n    deleteOrderById,\r\n    cancelOrder,\r\n    cancelOrderById,\r\n    updateOrderByRestaurant,\r\n    uploadItemImages,\r\n    updateOrderStatus\r\n};\r\n","const ratingModel = require(\"../models/ratingModel\");\r\nconst itemModel = require(\"../models/itemModel\");\r\nconst customerModel = require(\"../models/customerModel\");\r\n\r\n\r\n// ADD OR UPDATE A RATING FOR A PRODUCT\r\nasync function addRating(req, res) {\r\n    try {\r\n      const { productId, customerId, name, rating, comment } = req.body;\r\n  \r\n      // Check if the product and customer exist\r\n      const product = await itemModel.findById(productId);\r\n\r\n      if (!product) {\r\n        return res.status(404).json({ error: \"Product not found.\" });\r\n      }\r\n      \r\n      const customer = await customerModel.findOne({customerId});\r\n  \r\n      if (!customer) {\r\n        return res.status(404).json({ error: \"Customer not found.\" });\r\n      }\r\n  \r\n      // Check if the customer has already rated the product\r\n      const existingRating = product.ratings.find(\r\n        (rating) => rating.customerId.toString() === customerId\r\n      );\r\n  \r\n      if (existingRating) {\r\n        // Update the existing rating\r\n        existingRating.name = name;\r\n        existingRating.rating = rating;\r\n        existingRating.comment = comment;\r\n        existingRating.time = new Date().toLocaleString();\r\n      } else {\r\n        // Add a new rating\r\n        let time = new Date().toLocaleString();\r\n        product.ratings.push({ customerId, name, rating, comment, time });\r\n      }\r\n  \r\n      // Calculate the new average rating and total rating counts\r\n      const ratings = product.ratings;\r\n      const totalRatingCount = ratings.length;\r\n      const sumRatings = ratings.reduce((sum, rating) => sum + rating.rating, 0);\r\n      const averageRating = totalRatingCount > 0 ? sumRatings / totalRatingCount : 0;\r\n  \r\n      // Update the averageRating and totalRatingCount fields in the product\r\n      product.averageRating = averageRating;\r\n      product.totalRatingCount = totalRatingCount;\r\n  \r\n      // Count the number of customers who gave ratings of 5, 4, 3, 2, and 1\r\n      // const ratingCounts = {\r\n      //   5: 0,\r\n      //   4: 0,\r\n      //   3: 0,\r\n      //   2: 0,\r\n      //   1: 0,\r\n      // };\r\n  \r\n      // ratings.forEach((rating) => {\r\n      //   if (rating.rating in ratingCounts) {\r\n      //     ratingCounts[rating.rating]++;\r\n      //   }\r\n      // });\r\n  \r\n      // Update the ratingCounts field in the product\r\n      // product.ratingCounts = ratingCounts;\r\n  \r\n      // Calculate the percentage of customers who gave ratings of 5, 4, 3, 2, and 1\r\n      const ratingPercentages = {};\r\n  \r\n      for (let i = 1; i <= 5; i++) {\r\n        const ratingCount = ratings.filter((rating) => rating.rating === i).length;\r\n        const percentage = (ratingCount / totalRatingCount) * 100 || 0;\r\n        ratingPercentages[i] = percentage;\r\n      }\r\n  \r\n      // Update the ratingPercentages field in the product\r\n      product.ratingPercentages = ratingPercentages;\r\n  \r\n      // Save the product\r\n      await product.save();\r\n  \r\n      return res.status(200).json(product);\r\n    } catch (error) {\r\n        const metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in addRating API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).json({ error: \"Failed to add rating.\" });\r\n    }\r\n  }\r\n  \r\n  \r\n  // GET ALL RATINGS\r\n  const getAllRatings = async (req, res) => {\r\n    try {\r\n      let productId = req.params.productId;\r\n      let ratings = await ratingModel.find({ productId });\r\n  \r\n      let averageRating;\r\n      let ratingSum = 0;\r\n      let totalRatingCount;\r\n      for (let i = 0; i < ratings.length; i++) {\r\n        ratingSum += ratings[i].rating;\r\n      }\r\n      averageRating = ratingSum / ratings.length;\r\n      totalRatingCount = ratings.length;\r\n      return res\r\n        .status(200)\r\n        .send({\r\n          status: true,\r\n          data: ratings,\r\n          averageRating: averageRating,\r\n          totalRatingCount: totalRatingCount,\r\n        });\r\n    } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n  };\r\n  \r\n  // GET ALL PRODUCTS WITH RATING\r\n  const getAllProductsWithRating = async (req, res) => {\r\n    try {\r\n      let { productId, ratingId }= req.params;\r\n  \r\n      let products = await itemModel.find().populate(\"ratingId\");\r\n      return res.status(200).send({ status: true, data: products });\r\n    } catch (error) {\r\n      return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n  };\r\n  \r\n  module.exports = { addRating, getAllRatings, getAllProductsWithRating };","const restaurantModel = require(\"../models/restaurantModel\");\r\nconst deletedUserModel = require(\"../models/deleteUserModel\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../utils/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\nconst { adminSecretKey } = require(\"../config/config\");\r\nconst BadRequest = require(\"../errors/badRequestError\");\r\nconst NotFound = require(\"../errors/notFoundError\");\r\nconst logger = require(\"../config/loggerConfig1\");\r\nconst itemModel = require(\"../models/itemModel\");\r\nconst menuModel = require(\"../models/menuModel\");\r\n\r\n// LOGIN USER\r\nconst authenticateAdmin = async (req, res) => {\r\n    try {\r\n        let { userId, userName, email, profilePic } = req.body;\r\n\r\n        const isUserExists = await restaurantModel.findOne({ userId });\r\n\r\n        if (!isUserExists) {\r\n            let userObj = {\r\n                userId,\r\n                userName,\r\n                email,\r\n                profilePic,\r\n            };\r\n\r\n            let newUser = await restaurantModel.create(userObj);\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: newUser,\r\n            });\r\n        } else {\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: isUserExists,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in authenticateAdmin API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// REGISTER/UPDATE RESTAURANT\r\nconst updateRestaurantDatails = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            // return res.status(400).send({ status: false, message: \"userId is required\"});\r\n            throw new BadRequest(userId, \"userId is required\");\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            // return res.status(400).send({\r\n            //     status: false,\r\n            //     message: \"Restaurant not found\",\r\n            // });\r\n            throw NotFound(\"restaurant\", userId);\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"userName\" in reqBody) {\r\n            restaurant.userName = reqBody.userName;\r\n        };\r\n\r\n        if (\"restaurantName\" in reqBody) {\r\n            restaurant.restaurantName = reqBody.restaurantName;\r\n        };\r\n\r\n        if (\"mobile\" in reqBody) {\r\n            restaurant.mobile = reqBody.mobile;\r\n        };\r\n\r\n        if (\"description\" in reqBody) {\r\n            restaurant.description = reqBody.description;\r\n        };\r\n\r\n        if (\"restaurant_address\" in reqBody) {\r\n            if (\"address\" in reqBody.restaurant_address) {\r\n                restaurant.restaurant_address.address = reqBody.restaurant_address.address;\r\n            };\r\n\r\n            if (\"apartment\" in reqBody.restaurant_address) {\r\n                restaurant.restaurant_address.apartment = reqBody.restaurant_address.apartment;\r\n            };\r\n\r\n            if (\"city\" in reqBody.restaurant_address) {\r\n                restaurant.restaurant_address.city = reqBody.restaurant_address.city;\r\n            };\r\n\r\n            if (\"post_code\" in reqBody.restaurant_address) {\r\n                restaurant.restaurant_address.post_code = reqBody.restaurant_address.post_code;\r\n            };\r\n\r\n            if (\"state\" in reqBody.restaurant_address) {\r\n                restaurant.restaurant_address.state = reqBody.restaurant_address.state;\r\n            };\r\n        };\r\n\r\n        if (\"slug\" in reqBody) {\r\n            let allRestaurant = await restaurantModel.find();\r\n\r\n            for (let obj of allRestaurant) {\r\n                if (reqBody.slug === obj.slug) {\r\n                    return res.status(200).send({\r\n                        status: false, \r\n                        message: \"This slug is duplicate, please provide a new slug\"\r\n                    });\r\n                }\r\n            };\r\n            restaurant.slug = reqBody.slug;\r\n        };\r\n\r\n        if (\"sitting_capacity\" in reqBody) {\r\n            restaurant.sitting_capacity = reqBody.sitting_capacity;\r\n        };\r\n\r\n        if (\"isVeg\" in reqBody) {\r\n            restaurant.isVeg = reqBody.isVeg;\r\n        };\r\n\r\n        if (\"max_allow_seating\" in req.body) {\r\n            restaurant.max_allow_seating = reqBody.max_allow_seating;\r\n        };\r\n\r\n        if (\"contact_number\" in reqBody) {\r\n            restaurant.contact_number = reqBody.contact_number;\r\n        };\r\n\r\n        if (\"contact_person\" in reqBody) {\r\n            restaurant.contact_person = reqBody.contact_person;\r\n        };\r\n\r\n        if (\"website\" in reqBody) {\r\n            restaurant.website = reqBody.website;\r\n        };\r\n\r\n        if (\"rating_review_url\" in reqBody) {\r\n            restaurant.rating_review_url = reqBody.rating_review_url;\r\n        };\r\n\r\n        if (\"GST_number\" in reqBody) {\r\n            restaurant.GST_number = reqBody.GST_number;\r\n        };\r\n\r\n        if (\"isActive\" in reqBody) {\r\n            restaurant.isActive = reqBody.isActive;\r\n        };\r\n\r\n        await restaurant.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Restaurant updated successfully\",\r\n            data: restaurant,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        if (error instanceof BadRequest) {\r\n            logger.error(`Error in updateRestaurantDatails API: Bad Request(Client Side Error). ${error.message}`, { meta: metadata });\r\n            return res.status(400).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        if (error instanceof NotFound) {\r\n            logger.error(`Error in updateRestaurantDatails API: Not Found Error. ${error.message}`, { meta: metadata });\r\n            return res.status(500).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        logger.error(`Error in updateRestaurantDatails API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// ADD OR UPDATE LOGO\r\nconst addUpdateLogo = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n            // throw new BadRequest(userId, \"Please provide the userId\");\r\n        }\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Restaurant not found\",\r\n            });\r\n            // throw new NotFound(\"restaurant\", userId);\r\n        }\r\n\r\n        let { File_Extension, File_Path, File_data, File_name } = req.body;\r\n\r\n        // console.log(\"reqbody\", req.body);\r\n\r\n        let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/logoImages/\";\r\n        let imgUniqName = uuid.v4() + File_Extension;\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"logoImages\", imgUniqName);\r\n\r\n        let oldImgName = restaurant.logo.fileName;\r\n\r\n        if (oldImgName) {\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"logoImages\", oldImgName);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            }\r\n        }\r\n\r\n        fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n        let logoObj = {\r\n            fileName: imgUniqName,\r\n            filePath: imgFullUrl,\r\n        };\r\n\r\n        restaurant.logo = logoObj;\r\n\r\n        await restaurant.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"logo updated successfully\",\r\n            logo: restaurant.logo,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addUpdateLogo API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET USER BY ID\r\nconst getRestaurantById = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            // return res.status(400).send({ status: false, message: \"userId is required\"});\r\n            throw new BadRequest(userId, \"userId is required\");\r\n        }\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        // };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            // return res.status(400).send({\r\n            //     status: false,\r\n            //     message: \"Restaurant not found\",\r\n            // });\r\n\r\n            throw new NotFound(\"restaurant\", userId);\r\n        }\r\n\r\n        let itemList = await itemModel.find({ userId});\r\n\r\n        let menuList = await menuModel.find({ userId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            restaurant,\r\n            itemList,\r\n            menuList\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        if (error instanceof BadRequest) {\r\n            logger.error(`Error in getRestaurantById API: Bad Request(Client Side Error). ${error.message}`, { meta: metadata });\r\n            return res.status(400).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        if (error instanceof NotFound) {\r\n            logger.error(`Error in getRestaurantById API: Not Found Error. ${error.message}`, { meta: metadata });\r\n            return res.status(500).send({ status: false, message: error.message, details: error.details });\r\n        }\r\n\r\n        logger.error(`Error in getRestaurantById API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL USERS\r\nconst getAllRestaurants = async (req, res) => {\r\n    try {\r\n        // let { key } = req.params;\r\n\r\n        // if (!key) {\r\n        //     return res.status(400).send({ status: false, message: \"key is required\" });\r\n        // }\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        // }\r\n\r\n        let restaurants = await restaurantModel.aggregate([{ $sample: { size: 10 } }]);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: restaurants,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getAllRestaurants API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// function to calculate the distance between two sets of latitude and longitude coordinates\r\n// (Haversine formula)\r\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\r\n    const R = 6371; // Earth radius (mean radius) in kilometers\r\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const distance = R * c; // Distance in kilometers\r\n    let d = distance.toFixed(2);\r\n    let roundedDistance = parseFloat(d);\r\n    return roundedDistance;\r\n}\r\n\r\n// GET RESTAURANTS BY ADDRESS OR LOCATION\r\nconst getRestaurantsByLocation = async (req, res) => {\r\n    try {\r\n        let { BY_LOCATION, BY_ADDRESS } = req.params;\r\n\r\n        let e = req.body;\r\n\r\n        if (BY_LOCATION) {\r\n            let latitude = e.latitude ? e.latitude : null;\r\n            let longitude = e.longitude ? e.longitude : null;\r\n            let range = e.range ? e.range : 5;\r\n\r\n            let allRestaurants = await restaurantModel.find({});\r\n\r\n            let restaurantArr = [];\r\n\r\n            if (allRestaurants.length) {\r\n                for (let restaurant of allRestaurants) {\r\n                    let distance;\r\n                    if (latitude && longitude && restaurant.location.latitude && restaurant.location.longitude) {\r\n                        distance = calculateDistance(latitude, longitude, restaurant.location.latitude, restaurant.location.longitude);\r\n                    }\r\n\r\n                    if (distance <= range) {\r\n                        restaurantArr.push(restaurant);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (restaurantArr.length === 0) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"No restaurant found\",\r\n                });\r\n            }\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: restaurantArr,\r\n            });\r\n        } else {\r\n            let { address, apartment, city } = e;\r\n            const filter = {};\r\n\r\n            if (address) {\r\n                filter[\"restaurant_address.address\"] = { $regex: address, $options: \"i\" };\r\n            }\r\n\r\n            if (apartment) {\r\n                filter[\"restaurant_address.apartment\"] = { $regex: apartment, $options: \"i\" };\r\n            }\r\n\r\n            if (city) {\r\n                filter[\"restaurant_address.city\"] = { $regex: city, $options: \"i\" };\r\n            }\r\n\r\n            const restaurants = await restaurantModel.find(filter);\r\n\r\n            if (restaurants.length === 0) {\r\n                return res.status(400).send({\r\n                    status: false,\r\n                    message: \"No restaurant found\",\r\n                });\r\n            }\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: restaurants,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getRestaurantByLocation API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET RESTAURANTS BY SEARCH DATA\r\nconst getRestaurantBySearchData = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n\r\n        let { search_data } = req.body;\r\n\r\n        if (categoryId) {\r\n            let restaurants = await restaurantModel.find({ categoryId });\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: restaurants,\r\n            });\r\n        } else {\r\n            let filter = {\r\n                $or: [\r\n                    { restaurantName: { $regex: search_data, $options: i }},\r\n                    { description: { $regex: search_data, $options: i } },\r\n                    { isVeg: { $regex: search_data, $options: i }}\r\n                ]\r\n            };\r\n\r\n            let restaurants = await restaurantModel.find(filter);\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: restaurants,\r\n            });\r\n        };\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getRestaurantBySearchData API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE USER\r\nconst deleteRestaurant = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\" });\r\n        }\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Restaurant not found\",\r\n            });\r\n        }\r\n\r\n        const { reason, feedback } = req.body;\r\n\r\n        let restaurantData = {\r\n            restaurant,\r\n        };\r\n\r\n        let jsonStr = JSON.stringify(restaurantData);\r\n\r\n        await restaurantModel.deleteOne({ userId });\r\n\r\n        let deletedUserData = {\r\n            userId,\r\n            deletedRestaurantData: jsonStr,\r\n            reason,\r\n            feedback,\r\n            deletedAt: new Date().toLocaleString(),\r\n        };\r\n\r\n        await deletedUserModel.create(deletedUserData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Restaurant deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in deleteRestaurant API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    authenticateAdmin,\r\n    updateRestaurantDatails,\r\n    addUpdateLogo,\r\n    deleteRestaurant,\r\n    getRestaurantById,\r\n    getRestaurantsByLocation,\r\n    getRestaurantBySearchData,\r\n    getAllRestaurants,\r\n    calculateDistance\r\n};\r\n","const tableModel = require('../models/tableModel');\r\nconst restaurantModel = require('../models/restaurantModel');\r\nconst { isValidObjectId } = require('mongoose');\r\nconst logger = require('../config/loggerConfig1');\r\n\r\n\r\n// ADD TABLE\r\nconst addTable = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"User Id is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant Not Found\"});\r\n        };\r\n\r\n        let { table_name, table_type, head_count, isIndoor } = req.body;\r\n\r\n        if (!table_name || !table_type || !head_count || typeof isIndoor === 'undefined') {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\"});\r\n        };\r\n\r\n        let tableId;\r\n        let isTableAlreadyExist;\r\n\r\n        do {\r\n            tableId = Math.floor(100000 + Math.random() * 899999);\r\n            isTableAlreadyExist = await tableModel.findOne({ tableId });\r\n        } while (isTableAlreadyExist);\r\n\r\n        let tableData = {\r\n            userId,\r\n            tableId,\r\n            table_name,\r\n            table_type,\r\n            head_count,\r\n            isIndoor\r\n        };\r\n\r\n        let newTable = await tableModel.create(tableData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Table added successfully\",\r\n            data: newTable\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n        logger.error(`Error in addTable API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET ALL TABLES\r\nconst getAllTables = async (req, res) => {\r\n    try {\r\n\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"User Id is required\"});\r\n        };\r\n\r\n        let restaurant = await restaurantModel.findOne({ userId });\r\n\r\n        if (!restaurant) {\r\n            return res.status(400).send({ status: false, message: \"Restaurant Not Found\"});\r\n        };\r\n\r\n        let tables = await tableModel.find({ userId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: tables\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n        logger.error(`Error in getAllTables API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET TABLE BY TABLE ID\r\nconst getTableById = async (req, res) => {\r\n    try {\r\n        let { tableId } = req.params;\r\n        if (!tableId) {\r\n            return res.status(400).send({ status: false, message: \"Table Id is required\" });\r\n        };\r\n\r\n        if (!isValidObjectId(tableId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid TableId\"});\r\n        };\r\n\r\n        let table = await tableModel.findById(tableId);\r\n\r\n        if (!table) {\r\n            return res.status(400).send({ status: false, message: \"Table Not Found\"});\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: table,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n        logger.error(`Error in getTableById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// UPDATE TABLE BY TABLE ID\r\nconst updateTableById = async (req, res) => {\r\n    try {\r\n        let { tableId } = req.params;\r\n        if (!tableId) {\r\n            return res.status(400).send({ status: false, message: \"Table Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(tableId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid TableId\"});\r\n        };\r\n\r\n        let table = await tableModel.findById(tableId);\r\n\r\n        if (!table) {\r\n            return res.status(400).send(400).send({ status: false, message: \"Table Not Found\"});\r\n        };\r\n\r\n        let e = req.body;\r\n\r\n        if (\"table_name\" in e) {\r\n            table.table_name = e.table_name;\r\n        };\r\n\r\n        if (\"table_type\" in e) {\r\n            table.table_type = e.table_type;\r\n        };\r\n\r\n        if (\"head_count\" in e) {\r\n            table.head_count = e.head_count;\r\n        };\r\n\r\n        if (\"isIndoor\" in e) {\r\n            table.isIndoor = e.isIndoor;\r\n        }\r\n\r\n        await table.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Table updated successfully\",\r\n            data: table\r\n        })\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n        logger.error(`Error in updateTableById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE TABLE BY TABLE ID\r\nconst deleteTableById = async (req, res) => {\r\n    try {\r\n        let { tableId } = req.params;\r\n        if (!tableId) {\r\n            return res.status(400).send({ status: false, message: \"Table Id is required\"});\r\n        };\r\n\r\n        if (!isValidObjectId(tableId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid TableId\"});\r\n        };\r\n\r\n        let table = await tableModel.findById(tableId);\r\n\r\n        if (!table) {\r\n            return res.status(400).send(400).send({ status: false, message: \"Table Not Found\"});\r\n        };\r\n\r\n        await tableModel.deleteOne({ _id: tableId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Table deleted successfully\",\r\n        })\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl\r\n        };\r\n        logger.error(`Error in deleteTableById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addTable,\r\n    getAllTables,\r\n    getTableById,\r\n    updateTableById,\r\n    deleteTableById\r\n};","const { StatusCodes } = require('http-status-codes');\r\nconst BaseError = require('./baseError');\r\n\r\nclass BadRequest extends BaseError {\r\n    constructor(propertyName, details) {\r\n        super(\"Bad Request!!!\", StatusCodes.BAD_REQUEST, `Invalid structure for ${propertyName} provided`, details);\r\n    }\r\n};\r\n\r\nmodule.exports = BadRequest;","class BaseError extends Error {\r\n    constructor(name, statusCode, description, details) {\r\n        super(description);\r\n        this.name = name;\r\n        this.statusCode = statusCode;\r\n        this.details = details;\r\n    }\r\n};\r\n\r\nmodule.exports = BaseError;","\r\nconst { StatusCodes } = require('http-status-codes');\r\nconst BaseError = require('./baseError');\r\n\r\nclass InternalServerError extends BaseError {\r\n    constructor (details) {\r\n        super(\"Internal Server Error\", StatusCodes.INTERNAL_SERVER_ERROR , 'Something Went Wrong', details, );\r\n    }\r\n};\r\n\r\nmodule.exports = InternalServerError;","const { StatusCodes } = require('http-status-codes');\r\nconst BaseError = require('./baseError');\r\n\r\nclass NotFound extends BaseError {\r\n    constructor(resourceName, resourceValue) {\r\n        super(\"Not Found\", StatusCodes.NOT_FOUND, `The requested resource ${resourceName} with value ${resourceValue} not found`, {\r\n            resourceName,\r\n            resourceValue\r\n        });\r\n    };\r\n};\r\n\r\nmodule.exports = NotFound;","const { StatusCodes } = require('http-status-codes');\r\nconst BaseError = require('./baseError');\r\n\r\nclass Unauthorized extends BaseError {\r\n    constructor(message, details = \"\") {\r\n        super(message, details);\r\n        this.name = \"Unauthorized\";\r\n        this.statusCode = StatusCodes.UNAUTHORIZED;\r\n    }\r\n};\r\n\r\nmodule.exports = Unauthorized;","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst userSchema = new mongoose.Schema(\r\n    {\r\n        adminId: {\r\n            type: String,\r\n            unique: true,\r\n            default: \"\"\r\n        },\r\n\r\n        sessionToken: {\r\n            type: String,\r\n        },\r\n\r\n        name: {\r\n            type: String,\r\n            trim: true,\r\n        },\r\n\r\n        profilePic: {\r\n            fileName: { type: String },\r\n            filePath: { type: String }\r\n        },\r\n\r\n        gender: {\r\n            type: String,\r\n            enum: [\"MALE\", \"FEMALE\", \"OTHER\", \"UNDEFINED\"],\r\n            default: \"UNDEFINED\",\r\n        },\r\n\r\n        password: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        email: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        mobile: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        date_of_birth: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Admin\", userSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst categorySchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n    },\r\n\r\n    category_image: {\r\n        fileName: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        filePath: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n\r\n    cat_enum: {\r\n        type: String,\r\n        enum: [\"\", \"\"]\r\n    },\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Category\", categorySchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst customerSchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      trim: true,\r\n    },\r\n\r\n    customerId: {\r\n      type: String,\r\n      trim: true,\r\n    },\r\n\r\n    email: {\r\n      type: String,\r\n      trim: true,\r\n    },\r\n\r\n    dialingCode: {\r\n      type: String,\r\n      trim: true,\r\n    },\r\n\r\n    mobile: {\r\n      type: String,\r\n      unique: true,\r\n      required: true,\r\n    },\r\n\r\n    password: {\r\n      type: String,\r\n      min: 8,\r\n      max: 15,\r\n    },\r\n\r\n    DOB: {\r\n      type: String,\r\n    },\r\n\r\n    FCMToken: {\r\n      type: String,\r\n    },\r\n\r\n    gender: {\r\n      type: String,\r\n    },\r\n\r\n    question: {\r\n      type: String,\r\n    },\r\n\r\n    feedback: {\r\n      type: String,\r\n    },\r\n\r\n    address: {\r\n      shipping: {\r\n        street: { type: String, trim: true },\r\n        city: { type: String, trim: true },\r\n        state: { type: String, trim: true },\r\n        pincode: { type: Number },\r\n      },\r\n      billing: {\r\n        street: { type: String, trim: true },\r\n        city: { type: String, trim: true },\r\n        city: { type: String, trim: true },\r\n        pincode: { type: Number },\r\n      },\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Customer\", customerSchema);\r\n","const mongoose = require('mongoose');\r\n\r\n\r\nconst deletedRestaurantsSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    deletedRestaurantData: {\r\n        type: String,\r\n    },\r\n\r\n    reason: {\r\n        type: String,\r\n    },\r\n\r\n    feedback: {\r\n        type: String,\r\n    },\r\n\r\n    deletedAt: {\r\n        type: String,\r\n    }\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"DeletedRestaurant\", deletedRestaurantsSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst itemSchema = new mongoose.Schema({\r\n\r\n    userId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    menuId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    item_name: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    menuName: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    categoryId: {\r\n        type: ObjectId,\r\n        ref: \"Category\"\r\n    },\r\n\r\n    categoryName: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    selling_price: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    isTaxable: {\r\n        type: Boolean\r\n    },\r\n\r\n    preparing_time: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    notes: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    item_images: [\r\n        { \r\n            fileName: { type: String, default: \"\" },\r\n            filePath: { type: String, default: \"\" }\r\n        }\r\n    ],\r\n\r\n    ratings: [\r\n        {\r\n          customerId: {\r\n            type: ObjectId,\r\n            ref: \"Customer\",\r\n          },\r\n          name: {\r\n            type: String,\r\n          },\r\n          rating: {\r\n            type: Number,\r\n          },\r\n          comment: {\r\n            type: String,\r\n          },\r\n          time: {\r\n            type: String\r\n          }\r\n        },\r\n      ],\r\n  \r\n      averageRating: {\r\n        type: Number,\r\n      },\r\n  \r\n      totalRatingCount: {\r\n        type: Number,\r\n      },\r\n  \r\n      ratingPercentages: {\r\n  \r\n      },\r\n\r\n    visit_count: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    status: {\r\n        type: Boolean,\r\n    },\r\n\r\n    seo_keywords: [],\r\n\r\n    video_link: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    isVeg: {\r\n        type: Boolean\r\n    },\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Item\", itemSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst menuSchema = new mongoose.Schema({\r\n\r\n    userId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    title: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    thumbnail: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    isActive: {\r\n        type: Boolean,\r\n        default: true,\r\n    }\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Menu\", menuSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst orderSchema = new mongoose.Schema({\r\n\r\n  orderID: {\r\n    type: Number\r\n  },\r\n\r\n  customerId: {\r\n    type: String,\r\n  },\r\n  \r\n  CGST:{\r\n    type: Number,\r\n  },\r\n  SGST:{\r\n    type: Number,\r\n  },\r\n  totalProduct: {\r\n    type: Number\r\n  },\r\n  paymentType: {\r\n    type: String,\r\n  },\r\n  tax: {\r\n    type: Number,\r\n  },\r\n  total: {\r\n    type: Number,\r\n  },\r\n  grandTotal: {\r\n    type: Number,\r\n  },\r\n  address: {\r\n    type: String,\r\n  },\r\n  apartment: {\r\n    type: String,\r\n  },\r\n  city: {\r\n    type: String,\r\n  },\r\n  countryCode: {\r\n    type: String\r\n  },\r\n  countryName: {\r\n    type: String\r\n  },\r\n  post_code:{\r\n    type: String,\r\n  },\r\n  state_code: {\r\n    type: String,\r\n  },\r\n  state: {\r\n    type: String,\r\n  },\r\n  email: {\r\n    type: String,\r\n  },\r\n  f_name: {\r\n    type: String,\r\n  },\r\n  l_name: {\r\n    type: String,\r\n  },\r\n  mobile: {\r\n    type: String,\r\n  },\r\n  status: {\r\n    type: String,\r\n    enum: [\"Pending\", \"Approved\", \"Rejected\", \"Shipped\", \"Completed\", \"Cancel\"],\r\n    default: \"Pending\"\r\n  },\r\n\r\n  question: {\r\n    type: String,\r\n  },\r\n\r\n  feedback: {\r\n    type: String,\r\n  },\r\n  \r\n  productList: [\r\n    {\r\n      productId: {\r\n        type: String,\r\n      },\r\n      restaurant_id: {\r\n        type: String,\r\n      },\r\n      MrpTotal: {\r\n        type: Number,\r\n      },\r\n      SubTotal: {\r\n        type: Number\r\n      },\r\n      averageRating: {\r\n        type: Number\r\n      },\r\n      preparing_time: {\r\n        type: String,\r\n      },\r\n      cartQty: {\r\n        type: Number\r\n      },\r\n      description: {\r\n        type: String,\r\n      },\r\n      isVeg: {\r\n        type: Boolean,\r\n      },\r\n      mrp: {\r\n        type: Number\r\n      },\r\n      name: {\r\n        type: String\r\n      },\r\n      salePrice: {\r\n        type: Number\r\n      },\r\n      qty: {\r\n        type: Number\r\n      },\r\n      skuCode: {\r\n        type: String,\r\n      },\r\n      thumbnail: {\r\n        type: String,\r\n      },\r\n      totalRatingCount: {\r\n        type: Number\r\n      }\r\n    }\r\n  ]\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('Order', orderSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst ratingSchema = new mongoose.Schema(\r\n  {\r\n    productId: {\r\n      type: ObjectId,\r\n      ref: \"Product\",\r\n    },\r\n\r\n    ratings: [{\r\n        customerId: {\r\n            type: String,\r\n        },\r\n\r\n        name: {\r\n          type: String,\r\n        },\r\n\r\n        rating: {\r\n            type: Number,\r\n        },\r\n\r\n        comment: {\r\n            type: String,\r\n        },\r\n\r\n        time: {\r\n          type: String,\r\n        }\r\n    }],\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Rating\", ratingSchema);\r\n","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst restaurantSchema = new mongoose.Schema({\r\n\r\n    userId: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n    },\r\n\r\n    userName: {\r\n        type: String,\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n    },\r\n\r\n    mobile: {\r\n        type: String,\r\n    },\r\n\r\n    profilePic: {\r\n        type: String,\r\n    },\r\n\r\n    restaurantName: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    restaurant_address: {\r\n        address: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        apartment: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        city: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        post_code: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        state: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n\r\n    location: {\r\n        latitude: {\r\n            type: Number,\r\n            default: 0.0\r\n        },\r\n\r\n        longitude: {\r\n            type: Number,\r\n            default: 0.0\r\n        }\r\n    },\r\n\r\n    logo: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    slug: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    categoryId: {\r\n        type: ObjectId,\r\n        ref: 'Category'\r\n    },\r\n\r\n    categoryName: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    sitting_capacity: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    isVeg: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n\r\n    max_allow_seating: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    banners: [\r\n        {\r\n            fileName: { type: String, default: \"\" },\r\n            filePath: { type: String, default: \"\" }\r\n        }\r\n    ],\r\n\r\n    contact_number: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    contact_person: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    website: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    rating_review_url: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    GST_number: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    tax: {\r\n        type: String,\r\n    },\r\n\r\n    isActive: {\r\n        type: Boolean,\r\n        default: true,\r\n    },\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Restaurant\", restaurantSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst tableSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    tableId: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n    },\r\n\r\n    table_name: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n    },\r\n\r\n    table_type: {\r\n        type: String,\r\n    },\r\n\r\n    head_count: {\r\n        type: Number,\r\n    },\r\n\r\n    isIndoor: {\r\n        type: Boolean\r\n    }\r\n    \r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model(\"Table\", tableSchema);","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createAdmin, \r\n    adminLogin, \r\n    getOneDayBookings,\r\n    getOneWeekBookings,\r\n    getOneMonthBookings,\r\n    getOneYearBookings,\r\n    getAllBookingsOfUser,\r\n} = require('../../controllers/adminController');\r\n\r\n// const { Authentication, Authorization } = require('../../middlewares/auth');\r\n\r\n// SIGNUP ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/createSuperAdmin\", createAdmin);\r\n\r\n// LOGIN ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/loginSuperAdmin\", adminLogin);\r\n\r\n// GET ONE DAY BOOKINGS (ADMIN API) // date format: 2024-05-02\r\nrouter.get(\"/api/v1/getOneDayBookings/:adminId/:sessionToken/:date?\", getOneDayBookings);\r\n\r\n// GET ONE WEEK BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneWeekBookings/:adminId/:sessionToken/:startDate?/:endDate?\", getOneWeekBookings);\r\n\r\n// GET ONE MONTH BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneMonthBookings/:adminId/:sessionToken/:month/:year\", getOneMonthBookings);\r\n\r\n// GET ONE YEAR BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneYearBookings/:adminId/:sessionToken/:year\", getOneYearBookings);\r\n\r\n// GET ALL BOOKINGS OF AN USER (ADMIN API)\r\nrouter.get(\"/api/v1/getUserAllBookings/:adminId/:sessionToken/:userId\", getAllBookingsOfUser);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { addCategory, getCategoryById, getAllCategories, updateCategory, deleteCategory } = require('../../controllers/categoryController');\r\n\r\n// ADD CATEGORY\r\nrouter.post(\"/api/v1/addCategory\", addCategory);\r\n\r\n// GET CATEGORY BY ID WITH ALL PRODUCTS\r\nrouter.get(\"/api/v1/getCategory/:categoryId\", getCategoryById);\r\n\r\n// GET ALL CATEGORIES\r\nrouter.get(\"/api/v1/getAllCategories\", getAllCategories);\r\n\r\n// UPDATE CATEGORY\r\nrouter.put(\"/api/v1/updateCategory/:categoryId\", updateCategory);\r\n\r\n// DELETE CATEGORY\r\nrouter.delete(\"/api/v1/deleteCategory/:categoryId\", deleteCategory);\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { loginCustomer, updateCustomerById, getAllCustomers, getCustomerById, deleteCustomerById } = require('../../controllers/customerController');\r\n\r\n// LOGIN CUSTOMER\r\nrouter.post(\"/api/v1/logincustomer\", loginCustomer);\r\n\r\n// GET ALL CUSTOMERS\r\nrouter.get(\"/api/v1/getAllCustomers\", getAllCustomers);\r\n\r\n// GET CUSTOMER BY ID\r\nrouter.get(\"/api/v1/getCustomerById/:customerId\", getCustomerById);\r\n\r\n// UPDATE CUSTOMER BY ID\r\nrouter.put(\"/api/v1/updatecustomer/:customerId\", updateCustomerById);\r\n\r\n// DELETE CUSTOMER\r\nrouter.delete(\"/api/v1/deleteaccount/:customerId\", deleteCustomerById);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { getDashboard, getAllBannerImages, updateBannerImages, deleteBannerImage, createDashboard } = require('../../controllers/dashboard');\r\n\r\n// CREATE DASHBOARD\r\nrouter.get(\"/api/v1/dashboard/:customerId?\", createDashboard);\r\n\r\n// GET DASHBOARD\r\nrouter.get(\"/api/v1/getDashboard/:userId\", getDashboard);\r\n\r\n// GET ALL BANNERS OF A RESTAURANT\r\nrouter.get(\"/api/v1/getBanners/:userId\", getAllBannerImages);\r\n\r\n// ADD/UPDATE BANNER IMAGES\r\nrouter.put(\"/api/v1/addOrUpdateBanner/:userId\", updateBannerImages);\r\n\r\n// DELETE BANNER IMAGE\r\nrouter.delete(\"/api/v1/deleteBanner/:imageId/:userId\", deleteBannerImage);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addItems, \r\n    getAllItems, \r\n    addUpdateItemImages, \r\n    updateItemById, \r\n    deleteItemById, \r\n    deleteItemImages, \r\n    getItemsBySearchKeywords, \r\n    getItemsByLocationOrSearchData,\r\n    getItemById,\r\n} = require('../../controllers/itemController');\r\n\r\n// ADD ITEMS\r\nrouter.post(\"/api/v1/addItem/:userId\", addItems);\r\n\r\n// ADD / UPDATE ITEM IMAGES\r\nrouter.post(\"/api/v1/updateItemImages/:itemId\", addUpdateItemImages);\r\n\r\n// GET ALL ITEMS\r\nrouter.get(\"/api/v1/getAllItems/:userId\", getAllItems);\r\n\r\n// GET ITEM BY ID\r\nrouter.get(\"/api/v1/viewProductWithRestaurant/:itemId/:userId\", getItemById);\r\n\r\n// GET ITEMS BY SEARCH DATA\r\nrouter.get(\"/api/v1/allItemSearchByKeywords/:categoryId?\", getItemsBySearchKeywords);\r\n\r\n// UPDATE ITEM BY ID\r\nrouter.put(\"/api/v1/updateItem/:itemId\", updateItemById);\r\n\r\n// DELETE ITEM BY ID\r\nrouter.delete(\"/api/v1/deleteItem/:itemId\", deleteItemById);\r\n\r\n// DELETE ITEM IMAGE\r\nrouter.delete(\"/api/v1/deleteItemImage/:itemId/:imageId\", deleteItemImages);\r\n\r\n// GET ITEMS BY LOCATION OR SEARCH DATA\r\nrouter.get(\"/api/v1/getItemByLocationOrSearchData/:BY_LOCATION?\", getItemsByLocationOrSearchData);\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { addMenu, getAllMenus, getMenuById, updateMenu, deleteMenu  } = require('../../controllers/menuController');\r\n\r\n// ADD MENU\r\nrouter.post(\"/api/v1/addMenu/:userId\", addMenu);\r\n\r\n// GET ALL MENUS\r\nrouter.get(\"/api/v1/getAllMenus/:userId\", getAllMenus);\r\n\r\n// GET MENU BY MENU ID\r\nrouter.get(\"/api/v1/getMenu/:menuId\", getMenuById);\r\n\r\n// UPDATE MENU BY MENU ID\r\nrouter.put(\"/api/v1/updateMenu/:menuId\", updateMenu);\r\n\r\n// DELETE MENU BY MENU ID\r\nrouter.delete(\"/api/v1/deleteMenu/:menuId\", deleteMenu);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { createOrder, getAllOrders, getOrderById, updateOrderById, cancelOrderById, updateOrderStatus } = require('../../controllers/orderController');\r\n\r\n// CREATE ORDER\r\nrouter.post(\"/api/v1/createOrder/:customerId\", createOrder);\r\n\r\n// GET ALL ORDERS\r\nrouter.get(\"/api/v1/getAllOrders/:restaurantId\", getAllOrders);\r\n\r\n// GET ORDER BY ORDER ID\r\nrouter.get(\"/api/v1/getOder/:orderId\", getOrderById);\r\n\r\n// UPDATE ORDER BY ORDER ID\r\nrouter.put(\"/api/v1/updateOrder/:orderId\", updateOrderById);\r\n\r\n// Cancel Order By Id\r\nrouter.put(\"/api/v1/cancelorder/:orderId\", cancelOrderById);\r\n\r\n// Update Order Status\r\nrouter.put(\"/api/v1/updateOrderStatus/:orderId\", updateOrderStatus);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { addRating } = require('../../controllers/ratingController');\r\n\r\n// ADD RATING TO ITEM\r\nrouter.post('/api/v1/addRating', addRating);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst {\r\n    authenticateAdmin,\r\n    updateRestaurantDatails,\r\n    addUpdateLogo,\r\n    getAllRestaurants,\r\n    getRestaurantById,\r\n    deleteRestaurant,\r\n    getRestaurantsByLocation,\r\n    getRestaurantBySearchData, \r\n    \r\n} = require('../../controllers/restaurantController');\r\n\r\n// AUTHENTICATE USER\r\nrouter.post(\"/api/v1/authenticateRestaurant\", authenticateAdmin);\r\n\r\n// GET USER BY ID\r\nrouter.get(\"/api/v1/viewRestaurant/:userId\", getRestaurantById);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/getAllRestaurants\", getAllRestaurants);\r\n\r\n// GET RESTAURANTS BY LOCATION OR ADDRESS\r\nrouter.get(\"/api/v1/getRestaurantByLocation/:BY_LOCATION?/:BY_ADDRESS?\", getRestaurantsByLocation);\r\n\r\n// GET RESTAURANTS BY SEARCH DATA\r\nrouter.get(\"/api/v1/allRestaurantSearchByKeywords/:categoryId\", getRestaurantBySearchData);\r\n\r\n// UPDATE USER\r\nrouter.post(\"/api/v1/updateRestaurant/:userId\", updateRestaurantDatails);\r\n\r\n// ADD UPDATE LOGO\r\nrouter.post(\"/api/v1/updateLogo/:userId\", addUpdateLogo);\r\n\r\n// DELETE USER BY USER ID\r\nrouter.delete(\"/api/v1/deleteRestaurant/:userId\", deleteRestaurant);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addTable, \r\n    getAllTables, \r\n    getTableById, \r\n    updateTableById, \r\n    deleteTableById \r\n} = require('../../controllers/tableController');\r\n\r\n// ADD TABLE\r\nrouter.post(\"/api/v1/addTable/:userId\", addTable);\r\n\r\n// GET ALL TABLES\r\nrouter.get(\"/api/v1/getAllTables/:userId\", getAllTables);\r\n\r\n// GET TABLE BY ID\r\nrouter.get(\"/api/v1/getTable/:tableId\", getTableById);\r\n\r\n// UPDATE TABLE BY ID\r\nrouter.put(\"/api/v1/updateTable/:tableId\", updateTableById);\r\n\r\n// DELETE TABLE BY ID\r\nrouter.delete(\"/api/v1/deleteTable/:tableId\", deleteTableById);\r\n\r\nmodule.exports = router;","const BaseError = require('../errors/baseError');\r\nconst { StatusCodes } = require('http-status-codes');\r\n\r\nfunction errorHandler(err, req, res, next) {\r\n    if (err instanceof BaseError) {\r\n        return res.status(err.statusCode).json({\r\n            success: false,\r\n            message: err.message,\r\n            err: err.details,\r\n            data: {}\r\n        });\r\n    };\r\n\r\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\r\n        success: false,\r\n        message: \"Something went wrong\",\r\n        err: err,\r\n        data: {}\r\n    });\r\n};\r\n\r\nmodule.exports = errorHandler;","const os = require(\"os\");\r\nconst validator = require('validator');\r\n\r\n// Validation functions\r\nconst isValidString = (value) => typeof value === 'string' && value.trim().length > 0;\r\n\r\n// Validate email\r\nconst isValidEmail = (value) => {\r\n    return validator.isEmail(value);\r\n};\r\n\r\n// Validate password\r\nconst isValidPassword = (value) => {\r\n    // Example password rules:\r\n    // - At least 8 characters\r\n    // - At least one uppercase letter\r\n    // - At least one lowercase letter\r\n    // - At least one number\r\n    // - At least one special character\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n    return passwordRegex.test(value);\r\n};\r\n\r\n// Validate Phone Number\r\nconst isValidPhoneNumber = (value) => validator.isMobilePhone(value, 'any', { strictMode: true });\r\n\r\n// Validate URL\r\nconst isValidURL = (value) => validator.isURL(value);\r\n\r\n// Validate Postal Code\r\nconst isValidPostalCode = (value, locale) => validator.isPostalCode(value, locale);\r\n\r\n// Validate Boolean\r\nconst isValidBoolean = (value) => typeof value === 'boolean';\r\n\r\n// Validate Integer\r\nconst isValidInteger = (value) => Number.isInteger(value);\r\n\r\n// Validate GST Number\r\nconst isValidGSTNumber = (value) => validator.isAlphanumeric(value) && value.length === 15; // Example rule for GST number\r\n\r\n// GET CURRENT IP ADDRESS\r\nlet getCurrentIPAddress = () => {\r\n    let networkInterfaces = os.networkInterfaces();\r\n    let ipAddress = Object.values(networkInterfaces)\r\n        .flat()\r\n        .filter((iface) => iface.family === \"IPv4\" && !iface.internal)\r\n        .map((iface) => iface.address)[0];\r\n    return ipAddress;\r\n};\r\n\r\n// Generate Random AlphaNumeric ID of given length\r\nfunction generateRandomAlphaNumericID(length) {\r\n    let id = \"\";\r\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        id += characters[randomIndex];\r\n    }\r\n    return id;\r\n};\r\n\r\n// Generate Random Numeric ID of given length\r\nfunction generateRandomNumericId(length) {\r\n    if (length <= 0) {\r\n        throw new Error(\"Length must be a positive integer\");\r\n    }\r\n\r\n    const digits = '0123456789';\r\n    let randomId = '';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * digits.length);\r\n        randomId += digits[randomIndex];\r\n    }\r\n\r\n    return randomId;\r\n};\r\n\r\n\r\nfunction isValidStatus(value) {\r\n    if( [\"Pending\", \"Approved\", \"Rejected\", \"Shipped\", \"Completed\", \"Cancel\"].indexOf(value) == -1) {return false}\r\n    else return true\r\n};\r\n\r\nmodule.exports = {\r\n    isValidString,\r\n    isValidEmail,\r\n    isValidPassword,\r\n    isValidPhoneNumber,\r\n    isValidURL,\r\n    isValidPostalCode,\r\n    isValidBoolean,\r\n    isValidInteger,\r\n    isValidGSTNumber,\r\n    isValidStatus,\r\n    getCurrentIPAddress,\r\n    generateRandomAlphaNumericID,\r\n    generateRandomNumericId\r\n};\r\n","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"compression\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"express-mongo-sanitize\");","module.exports = require(\"express-rate-limit\");","module.exports = require(\"helmet\");","module.exports = require(\"hpp\");","module.exports = require(\"http-status-codes\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"uuid\");","module.exports = require(\"validator\");","module.exports = require(\"winston\");","module.exports = require(\"winston-mongodb\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fileUpload = require('express-fileupload');\r\nconst cors = require('cors');\r\nconst helmet = require('helmet');\r\nconst rateLimit = require('express-rate-limit');\r\nconst compression = require('compression');\r\n// const xss = require('xss');\r\nconst mongoSanitize = require('express-mongo-sanitize');\r\nconst hpp = require('hpp');\r\n\r\nconst { port } = require('./src/config/config');\r\nconst errorHandler = require('./src/utils/errorHandler');\r\nconst { connectToDatabase } = require('./src/config/dbConfig');\r\nconst logger = require('./src/config/loggerConfig1');\r\n\r\nconst app = express();\r\n\r\napp.use(helmet());\r\napp.use(cors());\r\napp.use(compression());\r\n// app.use(xss());\r\napp.use(mongoSanitize());\r\napp.use(hpp()); // HTTP Parameter Pollution prevention\r\napp.use(express.json({ limit: \"50mb\" }));\r\napp.use(express.urlencoded({ extended: true, limit: \"50mb\" }));\r\napp.use(bodyParser.json({ limit: \"50mb\" }));\r\napp.use(fileUpload());\r\n\r\nconst adminRoutes = require('./src/routes/v1/adminRoutes');\r\nconst categoryRoutes = require('./src/routes/v1/categoryRoutes');\r\nconst customerRoutes = require('./src/routes/v1/customerRoutes');\r\nconst dashboardRoutes = require('./src/routes/v1/dashboardRoutes');\r\nconst itemRoutes = require('./src/routes/v1/itemRoutes');\r\nconst menuRoutes = require('./src/routes/v1/menuRoutes');\r\nconst orderRoutes = require('./src/routes/v1/orderRoutes');\r\nconst ratingRoutes = require('./src/routes/v1/ratingRoutes');\r\nconst restaurantRoutes = require('./src/routes/v1/restaurantRoutes');\r\nconst tableRoutes = require('./src/routes/v1/tableRoutes');\r\n\r\n// Content Security Policy\r\napp.use(\r\n    helmet.contentSecurityPolicy({\r\n        directives: {\r\n            defaultSrc: [\"'self'\"],\r\n            scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\r\n            objectSrc: [\"'none'\"],\r\n            upgradeInsecureRequests: [],\r\n        },\r\n    })\r\n);\r\n\r\n// HTTP Strict Transport Security (HSTS)\r\napp.use(\r\n    helmet.hsts({\r\n        maxAge: 31536000, // 1 year\r\n        includeSubDomains: true,\r\n        preload: true,\r\n    })\r\n);\r\n\r\n\r\n// Rate Limiting\r\nconst limiter = rateLimit({\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    max: 100, // Limit each IP to 100 requests per windowMs\r\n    message: \"Too many requests from this IP, please try again later.\"\r\n});\r\n\r\napp.use(limiter);\r\n\r\n// app.use(\"/userImages\", express.static(__dirname + \"/userImages\"));\r\napp.use(\"/categoryImages\", express.static(__dirname + \"/categoryImages\"));\r\napp.use(\"/bannerImages\", express.static(__dirname + \"/bannerImages\"));\r\napp.use(\"/itemImages\", express.static(__dirname + \"/itemImages\"));\r\napp.use(\"/menuImages\", express.static(__dirname + \"/menuImages\"));\r\napp.use(\"/logoImages\", express.static(__dirname + \"/logoImages\"));\r\n\r\napp.use(\"/\", adminRoutes);\r\napp.use(\"/\", categoryRoutes);\r\napp.use(\"/\", customerRoutes);\r\napp.use(\"/\", dashboardRoutes);\r\napp.use(\"/\", itemRoutes);\r\napp.use(\"/\", menuRoutes);\r\napp.use(\"/\", orderRoutes);\r\napp.use(\"/\", ratingRoutes);\r\napp.use(\"/\", restaurantRoutes);\r\napp.use(\"/\", tableRoutes);\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"<h1>Multi Vender App is Up and Running</h1>\");\r\n});\r\n\r\n// Last middleware if any error comes\r\napp.use(errorHandler);\r\n\r\nconst server = app.listen(port, async() => {\r\n    console.log('App is running on port', port);\r\n    // logger.info('Server started on port ' + port, { meta: { timestamp: new Date().toISOString() } });\r\n    await connectToDatabase;\r\n});\r\n\r\n// Handling unhandled promise rejections\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n    // Close the server and exit the process\r\n    server.close(() => {\r\n        process.exit(1);\r\n    });\r\n});\r\n\r\n// Handling uncaught exceptions\r\nprocess.on('uncaughtException', (err) => {\r\n    console.error('Uncaught Exception thrown:', err);\r\n    // Close the server and exit the process\r\n    server.close(() => {\r\n        process.exit(1);\r\n    });\r\n});\r\n\r\n// Handling process termination signals for graceful shutdown\r\nprocess.on('SIGTERM', () => {\r\n    console.log('SIGTERM signal received: closing HTTP server');\r\n    server.close(() => {\r\n        console.log('HTTP server closed');\r\n        process.exit(0);\r\n    });\r\n});\r\n\r\nprocess.on('SIGINT', () => {\r\n    console.log('SIGINT signal received: closing HTTP server');\r\n    server.close(() => {\r\n        console.log('HTTP server closed');\r\n        process.exit(0);\r\n    });\r\n});"],"names":["config","module","exports","port","process","env","PORT","adminSecretKey","ADMIN_SECRET_KEY","mongoDBUri","MONGO_DB_URL","tokenSecretKey","TOKEN_SECRET_KEY","mongoose","connect","maxPoolSize","connectToDatabase","connection","on","console","error","bind","once","log","winston","allowedTransports","push","transports","MongoDB","level","db","collection","format","combine","timestamp","json","info","meta","options","useUnifiedTopology","File","filename","logger","createLogger","printf","toUpperCase","message","JSON","stringify","defaultMeta","service","adminModel","jwt","bcrypt","uuid","path","fs","getCurrentIPAddress","generateRandomAlphaNumericID","NotFound","BadRequest","InternalServerError","Unauthorized","createAdmin","async","req","res","name","email","password","mobile","gender","date_of_birth","body","picObj","files","profilePic","hash","currentIpAddress","profilePicPath","profilePicName","v4","split","pop","profilePicFullPath","adminImgFolder","join","__dirname","existsSync","mkdirSync","picSavingPath","mv","err","fileName","filePath","adminObj","adminId","sessionToken","newAdmin","create","status","send","data","metadata","stack","details","Date","toISOString","ip","method","url","originalUrl","statusCode","serverError","adminLogin","admin","findOne","compare","result","date","now","issueTime","Math","floor","token","sign","_id","toString","iat","expiresIn","setHeader","save","getAllBookingsOfUser","userId","params","userModel","userAllBookings","bookingModel","find","getOneDayBookings","today","year","getFullYear","String","getMonth","padStart","getDate","oneDayBookings","BookingDate","grandTotal","booking","grand_total","totalBookings","oneDayRevenue","getOneWeekBookings","startDate","endDate","oneWeekAgo","getTime","startYear","oneWeekBookings","$gte","$lte","length","getOneMonthBookings","month","oneMonthBookings","createdAt","oneMonthRevenue","getOneYearBookings","oneYearBookings","oneYearRequests","oneYearRevenue","categoryModel","itemModel","isValidObjectId","addCategory","description","category_image","currApAddress","imgRelativePath","imgUniqName","imgUrl","imgSavingPath","categoryObj","newCategory","getCategoryById","categoryId","category","findById","allItems","products","getAllCategories","categories","updateCategory","c","e","oldImgName","oldImgPath","unlinkSync","imgPath","imgObj","deleteCategory","categoryImgName","categoryImgPath","deleteOne","customerModel","loginCustomer","customerId","dialingCode","HCFToken","customer","loginData","newcustomerData","getAllCustomers","customers","getCustomerById","updateCustomerById","DOB","address","deleteCustomerById","question","feedback","restaurantModel","orderModel","createDashboard","myOrders","getDashboard","restaurant","bannerImages","banners","updateBannerImages","ImageModel","parsedData","parse","bannerImage","index","isNewPick","img_id","imageName","imgFullUrl","newBannerObj","oldImage","updatedBannerObj","deleteBannerImage","imageId","i","arr","splice","getAllBannerImages","ratingModel","calculateDistance","addItems","menuId","item_name","menuName","selling_price","isTaxable","preparing_time","notes","visit_count","seo_keywords","video_link","isVeg","itemData","product","ratings","aggregate","$match","productId","$group","averageRating","$avg","totalRatingCount","$sum","addUpdateItemImages","itemId","item","itemImage","newImgObj","item_images","oldImageName","imgName","oldImagePath","deleteItemImages","getAllItems","items","getItemById","getItemsBySearchKeywords","search_data","filter","$or","$regex","$options","updateItemById","deleteItemById","getItemsByLocationOrSearchData","BY_LOCATION","$sample","size","latitude","longitude","allRestaurants","itemArr","distance","location","limit","itemObj","sort","a","b","menuModel","addMenu","title","isActive","File_Extension","File_Path","File_data","File_name","thumbnail","decodedData","Buffer","from","writeFileSync","menuData","newMenu","getAllMenus","allMenus","munus","getMenuById","menu","updateMenu","ele","oldImg","decodedImg","deleteMenu","generateRandomNumericId","isValidStatus","createOrder","f_name","l_name","apartment","city","post_code","state","state_code","countryCode","countryName","productList","totalProduct","tax","CGST","SGST","total","restaurant_id","MrpTotal","SubTotal","qty","cartQty","mrp","salePrice","skuCode","orderData","orderID","newOrder","getAllOrders","restaurantId","orders","getOrderById","orderId","order","updateOrderById","customer_name","flag","table_name","customer_mobile","head_count","item_list","total_items","canceledBy","deleteOrderById","cancelOrder","restaurantName","cancelOrderById","includes","findOneAndUpdate","$set","new","orderStatus","updateOrderByRestaurant","uploadItemImages","itemImages","Array","isArray","itemImgArr","img","updateOrderStatus","addRating","rating","comment","existingRating","time","toLocaleString","sumRatings","reduce","sum","ratingPercentages","ratingCount","percentage","getAllRatings","ratingSum","getAllProductsWithRating","ratingId","populate","deletedUserModel","lat1","lon1","lat2","lon2","dLat","PI","dLon","sin","cos","d","atan2","sqrt","toFixed","parseFloat","authenticateAdmin","userName","isUserExists","userObj","newUser","updateRestaurantDatails","reqBody","restaurant_address","allRestaurant","obj","slug","sitting_capacity","max_allow_seating","contact_number","contact_person","website","rating_review_url","GST_number","addUpdateLogo","logo","logoObj","deleteRestaurant","reason","restaurantData","jsonStr","deletedUserData","deletedRestaurantData","deletedAt","getRestaurantById","itemList","menuList","getRestaurantsByLocation","BY_ADDRESS","range","restaurantArr","restaurants","getRestaurantBySearchData","getAllRestaurants","tableModel","addTable","tableId","isTableAlreadyExist","table_type","isIndoor","random","tableData","newTable","getAllTables","tables","getTableById","table","updateTableById","deleteTableById","StatusCodes","BaseError","constructor","propertyName","super","BAD_REQUEST","Error","this","INTERNAL_SERVER_ERROR","resourceName","resourceValue","NOT_FOUND","UNAUTHORIZED","userSchema","Schema","Types","ObjectId","type","unique","default","trim","enum","timestamps","model","categorySchema","cat_enum","customerSchema","required","min","max","FCMToken","shipping","street","pincode","Number","billing","deletedRestaurantsSchema","itemSchema","ref","categoryName","Boolean","menuSchema","orderSchema","paymentType","ratingSchema","restaurantSchema","tableSchema","router","Router","post","get","put","delete","next","success","os","validator","isValidString","value","isValidEmail","isEmail","isValidPassword","test","isValidPhoneNumber","isMobilePhone","strictMode","isValidURL","isURL","isValidPostalCode","locale","isPostalCode","isValidBoolean","isValidInteger","isInteger","isValidGSTNumber","isAlphanumeric","indexOf","networkInterfaces","Object","values","flat","iface","family","internal","map","id","characters","randomId","digits","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","express","bodyParser","fileUpload","cors","helmet","rateLimit","compression","mongoSanitize","hpp","errorHandler","app","use","urlencoded","extended","adminRoutes","categoryRoutes","customerRoutes","dashboardRoutes","itemRoutes","menuRoutes","orderRoutes","ratingRoutes","restaurantRoutes","tableRoutes","contentSecurityPolicy","directives","defaultSrc","scriptSrc","objectSrc","upgradeInsecureRequests","hsts","maxAge","includeSubDomains","preload","limiter","windowMs","static","server","listen","promise","close","exit"],"sourceRoot":""}